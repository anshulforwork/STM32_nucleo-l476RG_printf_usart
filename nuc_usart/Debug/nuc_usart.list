
nuc_usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e4  080041e4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041ec  080041ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080041f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  0800425c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  0800425c  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af05  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a62  00000000  00000000  0002afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072c  00000000  00000000  0002d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002674b  00000000  00000000  0002dae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b62d  00000000  00000000  0005422f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e94a0  00000000  00000000  0005f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d84  00000000  00000000  00148cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800413c 	.word	0x0800413c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800413c 	.word	0x0800413c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fa81 	bl	8000a78 <HAL_Init>

  /* USER CODE BEGIN Init */
  setbuf(stdout, NULL);// for the usart printf
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <main+0x48>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 feba 	bl	80032f8 <setbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f81a 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f89a 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f868 	bl	8000660 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0;i<100;i++)
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e00a      	b.n	80005ac <main+0x40>
	  {
	  	printf("Hello World ! %d\r\n",i);// for the usart printf
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4807      	ldr	r0, [pc, #28]	; (80005b8 <main+0x4c>)
 800059a:	f002 fe9b 	bl	80032d4 <iprintf>
	  	HAL_Delay(1000);
 800059e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a2:	f000 fae5 	bl	8000b70 <HAL_Delay>
	  for(int i=0;i<100;i++)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b63      	cmp	r3, #99	; 0x63
 80005b0:	ddf1      	ble.n	8000596 <main+0x2a>
 80005b2:	e7ed      	b.n	8000590 <main+0x24>
 80005b4:	20000064 	.word	0x20000064
 80005b8:	08004154 	.word	0x08004154

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	; 0x58
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2244      	movs	r2, #68	; 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ff8d 	bl	80034ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e2:	f000 fd87 	bl	80010f4 <HAL_PWREx_ControlVoltageScaling>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ec:	f000 f8b4 	bl	8000758 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fa:	2310      	movs	r3, #16
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800060a:	230a      	movs	r3, #10
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fdbe 	bl	80011a0 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800062a:	f000 f895 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f986 	bl	8001958 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000652:	f000 f881 	bl	8000758 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3758      	adds	r7, #88	; 0x58
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_USART2_UART_Init+0x5c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 80006a4:	f002 f838 	bl	8002718 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f853 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000084 	.word	0x20000084
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_GPIO_Init+0x44>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <MX_GPIO_Init+0x44>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_GPIO_Init+0x44>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_GPIO_Init+0x44>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <MX_GPIO_Init+0x44>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_GPIO_Init+0x44>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <UWriteData>:

/* USER CODE BEGIN 4 */
void UWriteData(const char data)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 8000712:	bf00      	nop
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <UWriteData+0x30>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	2b80      	cmp	r3, #128	; 0x80
 8000720:	d1f8      	bne.n	8000714 <UWriteData+0xc>

	huart2.Instance->TDR=data;
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <UWriteData+0x30>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	b292      	uxth	r2, r2
 800072a:	851a      	strh	r2, [r3, #40]	; 0x28

}// for the usart printf
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	20000084 	.word	0x20000084

0800073c <__io_putchar>:
int __io_putchar(int ch)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffdd 	bl	8000708 <UWriteData>
	return ch;
 800074e:	687b      	ldr	r3, [r7, #4]
}// for the usart printf
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x44>)
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <HAL_MspInit+0x44>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6613      	str	r3, [r2, #96]	; 0x60
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x44>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x44>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_MspInit+0x44>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6593      	str	r3, [r2, #88]	; 0x58
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x44>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b0ac      	sub	sp, #176	; 0xb0
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2288      	movs	r2, #136	; 0x88
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fe8c 	bl	80034ea <memset>
  if(huart->Instance==USART2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a21      	ldr	r2, [pc, #132]	; (800085c <HAL_UART_MspInit+0xb0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d13b      	bne.n	8000854 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007dc:	2302      	movs	r3, #2
 80007de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fad9 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007f4:	f7ff ffb0 	bl	8000758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_UART_MspInit+0xb4>)
 80007fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fc:	4a18      	ldr	r2, [pc, #96]	; (8000860 <HAL_UART_MspInit+0xb4>)
 80007fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000802:	6593      	str	r3, [r2, #88]	; 0x58
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_UART_MspInit+0xb4>)
 8000806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_UART_MspInit+0xb4>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <HAL_UART_MspInit+0xb4>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_UART_MspInit+0xb4>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000828:	230c      	movs	r3, #12
 800082a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000840:	2307      	movs	r3, #7
 8000842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800084a:	4619      	mov	r1, r3
 800084c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000850:	f000 fa98 	bl	8000d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	37b0      	adds	r7, #176	; 0xb0
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f93e 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e00a      	b.n	80008e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ca:	f3af 8000 	nop.w
 80008ce:	4601      	mov	r1, r0
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	60ba      	str	r2, [r7, #8]
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbf0      	blt.n	80008ca <_read+0x12>
  }

  return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e009      	b.n	8000918 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff15 	bl	800073c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf1      	blt.n	8000904 <_write+0x12>
  }
  return len;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_close>:

int _close(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000952:	605a      	str	r2, [r3, #4]
  return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_isatty>:

int _isatty(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f002 fde0 	bl	8003588 <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20018000 	.word	0x20018000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	2000010c 	.word	0x2000010c
 80009fc:	20000260 	.word	0x20000260

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 fd9f 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a56:	f7ff fd89 	bl	800056c <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a68:	080041f4 	.word	0x080041f4
  ldr r2, =_sbss
 8000a6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a70:	20000260 	.word	0x20000260

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_Init+0x3c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <HAL_Init+0x3c>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f000 f944 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f80f 	bl	8000ab8 <HAL_InitTick>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	e001      	b.n	8000aaa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa6:	f7ff fe5d 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_InitTick+0x6c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d023      	beq.n	8000b14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_InitTick+0x70>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_InitTick+0x6c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f941 	bl	8000d6a <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10f      	bne.n	8000b0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d809      	bhi.n	8000b08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 f919 	bl	8000d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_InitTick+0x74>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e007      	b.n	8000b18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	e004      	b.n	8000b18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
 8000b12:	e001      	b.n	8000b18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000110 	.word	0x20000110

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000110 	.word	0x20000110

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff47 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff5c 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffb0 	bl	8000cd8 <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d92:	e17f      	b.n	8001094 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 8171 	beq.w	800108e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d005      	beq.n	8000dc4 <HAL_GPIO_Init+0x40>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d130      	bne.n	8000e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	f003 0201 	and.w	r2, r3, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d118      	bne.n	8000e64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	6939      	ldr	r1, [r7, #16]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80ac 	beq.w	800108e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	4a5e      	ldr	r2, [pc, #376]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6613      	str	r3, [r2, #96]	; 0x60
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f4e:	4a5a      	ldr	r2, [pc, #360]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f78:	d025      	beq.n	8000fc6 <HAL_GPIO_Init+0x242>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <HAL_GPIO_Init+0x338>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d01f      	beq.n	8000fc2 <HAL_GPIO_Init+0x23e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <HAL_GPIO_Init+0x33c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x23a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x340>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x236>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_GPIO_Init+0x344>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x232>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_GPIO_Init+0x348>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x22e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <HAL_GPIO_Init+0x34c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x22a>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00c      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e00a      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fd8:	4937      	ldr	r1, [pc, #220]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800100a:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_GPIO_Init+0x350>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_GPIO_Init+0x350>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_GPIO_Init+0x350>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f ae78 	bne.w	8000d94 <HAL_GPIO_Init+0x10>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800
 80010c4:	48000c00 	.word	0x48000c00
 80010c8:	48001000 	.word	0x48001000
 80010cc:	48001400 	.word	0x48001400
 80010d0:	48001800 	.word	0x48001800
 80010d4:	40010400 	.word	0x40010400

080010d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40007000 	.word	0x40007000

080010f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001102:	d130      	bne.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800110c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001110:	d038      	beq.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2232      	movs	r2, #50	; 0x32
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9b      	lsrs	r3, r3, #18
 8001134:	3301      	adds	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001138:	e002      	b.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3b01      	subs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114c:	d102      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x60>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f2      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001160:	d110      	bne.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e00f      	b.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800116e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001172:	d007      	beq.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001182:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40007000 	.word	0x40007000
 8001198:	20000000 	.word	0x20000000
 800119c:	431bde83 	.word	0x431bde83

080011a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e3ca      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b2:	4b97      	ldr	r3, [pc, #604]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011bc:	4b94      	ldr	r3, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80e4 	beq.w	800139c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <HAL_RCC_OscConfig+0x4a>
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b0c      	cmp	r3, #12
 80011de:	f040 808b 	bne.w	80012f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	f040 8087 	bne.w	80012f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ea:	4b89      	ldr	r3, [pc, #548]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x62>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e3a2      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1a      	ldr	r2, [r3, #32]
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <HAL_RCC_OscConfig+0x7c>
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121a:	e005      	b.n	8001228 <HAL_RCC_OscConfig+0x88>
 800121c:	4b7c      	ldr	r3, [pc, #496]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800121e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001228:	4293      	cmp	r3, r2
 800122a:	d223      	bcs.n	8001274 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fd55 	bl	8001ce0 <RCC_SetFlashLatencyFromMSIRange>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e383      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001240:	4b73      	ldr	r3, [pc, #460]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a72      	ldr	r2, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b70      	ldr	r3, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	496d      	ldr	r1, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125e:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	4968      	ldr	r1, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
 8001272:	e025      	b.n	80012c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4960      	ldr	r1, [pc, #384]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	495b      	ldr	r1, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d109      	bne.n	80012c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fd15 	bl	8001ce0 <RCC_SetFlashLatencyFromMSIRange>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e343      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012c0:	f000 fc4a 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b52      	ldr	r3, [pc, #328]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	4950      	ldr	r1, [pc, #320]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80012d2:	5ccb      	ldrb	r3, [r1, r3]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_RCC_OscConfig+0x278>)
 80012de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e0:	4b4e      	ldr	r3, [pc, #312]	; (800141c <HAL_RCC_OscConfig+0x27c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fbe7 	bl	8000ab8 <HAL_InitTick>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d052      	beq.n	800139a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	e327      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d032      	beq.n	8001366 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a42      	ldr	r2, [pc, #264]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130c:	f7ff fc24 	bl	8000b58 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001314:	f7ff fc20 	bl	8000b58 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e310      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a36      	ldr	r2, [pc, #216]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4931      	ldr	r1, [pc, #196]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	492c      	ldr	r1, [pc, #176]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
 8001364:	e01a      	b.n	800139c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a29      	ldr	r2, [pc, #164]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001372:	f7ff fbf1 	bl	8000b58 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137a:	f7ff fbed 	bl	8000b58 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e2dd      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x1da>
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800139a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d074      	beq.n	8001492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d005      	beq.n	80013ba <HAL_RCC_OscConfig+0x21a>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	d10e      	bne.n	80013d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d10b      	bne.n	80013d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d064      	beq.n	8001490 <HAL_RCC_OscConfig+0x2f0>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d160      	bne.n	8001490 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e2ba      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x24a>
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e026      	b.n	8001438 <HAL_RCC_OscConfig+0x298>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f2:	d115      	bne.n	8001420 <HAL_RCC_OscConfig+0x280>
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a02      	ldr	r2, [pc, #8]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e014      	b.n	8001438 <HAL_RCC_OscConfig+0x298>
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	08004168 	.word	0x08004168
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004
 8001420:	4ba0      	ldr	r3, [pc, #640]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a9f      	ldr	r2, [pc, #636]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b9d      	ldr	r3, [pc, #628]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a9c      	ldr	r2, [pc, #624]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fb8a 	bl	8000b58 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fb86 	bl	8000b58 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e276      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145a:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x2a8>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fb76 	bl	8000b58 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fb72 	bl	8000b58 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e262      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001482:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x2d0>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d060      	beq.n	8001560 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x310>
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d119      	bne.n	80014de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d116      	bne.n	80014de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x328>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e23f      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	4973      	ldr	r1, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014dc:	e040      	b.n	8001560 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d023      	beq.n	800152e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e6:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6e      	ldr	r2, [pc, #440]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb31 	bl	8000b58 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fb2d 	bl	8000b58 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e21d      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150c:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	495f      	ldr	r1, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e018      	b.n	8001560 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a5c      	ldr	r2, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fb0d 	bl	8000b58 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fb09 	bl	8000b58 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1f9      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01c      	beq.n	80015ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001574:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fae8 	bl	8000b58 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fae4 	bl	8000b58 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1d4      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ef      	beq.n	800158c <HAL_RCC_OscConfig+0x3ec>
 80015ac:	e01b      	b.n	80015e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b4:	4a3b      	ldr	r2, [pc, #236]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff facb 	bl	8000b58 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fac7 	bl	8000b58 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1b7      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ef      	bne.n	80015c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80a6 	beq.w	8001740 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10d      	bne.n	8001620 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	6593      	str	r3, [r2, #88]	; 0x58
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161c:	2301      	movs	r3, #1
 800161e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d118      	bne.n	800165e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_RCC_OscConfig+0x508>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001638:	f7ff fa8e 	bl	8000b58 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001640:	f7ff fa8a 	bl	8000b58 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e17a      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <HAL_RCC_OscConfig+0x4d8>
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001676:	e029      	b.n	80016cc <HAL_RCC_OscConfig+0x52c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d115      	bne.n	80016ac <HAL_RCC_OscConfig+0x50c>
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001696:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x52c>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40007000 	.word	0x40007000
 80016ac:	4b9c      	ldr	r3, [pc, #624]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	4a9b      	ldr	r2, [pc, #620]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016bc:	4b98      	ldr	r3, [pc, #608]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c2:	4a97      	ldr	r2, [pc, #604]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d016      	beq.n	8001702 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fa40 	bl	8000b58 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa3c 	bl	8000b58 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e12a      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ed      	beq.n	80016dc <HAL_RCC_OscConfig+0x53c>
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fa29 	bl	8000b58 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fa25 	bl	8000b58 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e113      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001720:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ed      	bne.n	800170a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172e:	7ffb      	ldrb	r3, [r7, #31]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	4a79      	ldr	r2, [pc, #484]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 800173a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80fe 	beq.w	8001946 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	2b02      	cmp	r3, #2
 8001750:	f040 80d0 	bne.w	80018f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	429a      	cmp	r2, r3
 8001766:	d130      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	3b01      	subs	r3, #1
 8001774:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d127      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d11f      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001794:	2a07      	cmp	r2, #7
 8001796:	bf14      	ite	ne
 8001798:	2201      	movne	r2, #1
 800179a:	2200      	moveq	r2, #0
 800179c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179e:	4293      	cmp	r3, r2
 80017a0:	d113      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d06e      	beq.n	80018a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d069      	beq.n	80018a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0ad      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017ec:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4b      	ldr	r2, [pc, #300]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80017f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f8:	f7ff f9ae 	bl	8000b58 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff f9aa 	bl	8000b58 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e09a      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001812:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_RCC_OscConfig+0x784>)
 8001824:	4013      	ands	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800182e:	3a01      	subs	r2, #1
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001838:	0212      	lsls	r2, r2, #8
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001840:	0852      	lsrs	r2, r2, #1
 8001842:	3a01      	subs	r2, #1
 8001844:	0552      	lsls	r2, r2, #21
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800184c:	0852      	lsrs	r2, r2, #1
 800184e:	3a01      	subs	r2, #1
 8001850:	0652      	lsls	r2, r2, #25
 8001852:	4311      	orrs	r1, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001858:	0912      	lsrs	r2, r2, #4
 800185a:	0452      	lsls	r2, r2, #17
 800185c:	430a      	orrs	r2, r1
 800185e:	4930      	ldr	r1, [pc, #192]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001860:	4313      	orrs	r3, r2
 8001862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800187c:	f7ff f96c 	bl	8000b58 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f968 	bl	8000b58 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e058      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a2:	e050      	b.n	8001946 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e04f      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d148      	bne.n	8001946 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018cc:	f7ff f944 	bl	8000b58 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff f940 	bl	8000b58 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e030      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x734>
 80018f2:	e028      	b.n	8001946 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d023      	beq.n	8001942 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_RCC_OscConfig+0x780>)
 8001900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff f927 	bl	8000b58 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	e00c      	b.n	8001928 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f923 	bl	8000b58 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d905      	bls.n	8001928 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e013      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
 8001920:	40021000 	.word	0x40021000
 8001924:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x7b0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ec      	bne.n	800190e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_OscConfig+0x7b0>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4905      	ldr	r1, [pc, #20]	; (8001950 <HAL_RCC_OscConfig+0x7b0>)
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x7b4>)
 800193c:	4013      	ands	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
 8001940:	e001      	b.n	8001946 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	feeefffc 	.word	0xfeeefffc

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0e7      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b75      	ldr	r3, [pc, #468]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d910      	bls.n	800199c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4970      	ldr	r1, [pc, #448]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b6e      	ldr	r3, [pc, #440]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0cf      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b66      	ldr	r3, [pc, #408]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d908      	bls.n	80019ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4960      	ldr	r1, [pc, #384]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04c      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d121      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0a6      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	4b54      	ldr	r3, [pc, #336]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d115      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e09a      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e08e      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e086      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4943      	ldr	r1, [pc, #268]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a40:	f7ff f88a 	bl	8000b58 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff f886 	bl	8000b58 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e06e      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d010      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d208      	bcs.n	8001a9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	492b      	ldr	r1, [pc, #172]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d210      	bcs.n	8001ace <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 0207 	bic.w	r2, r3, #7
 8001ab4:	4923      	ldr	r1, [pc, #140]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_RCC_ClockConfig+0x1ec>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e036      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4918      	ldr	r1, [pc, #96]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4910      	ldr	r1, [pc, #64]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b0c:	f000 f824 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	490b      	ldr	r1, [pc, #44]	; (8001b4c <HAL_RCC_ClockConfig+0x1f4>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1fc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe ffc1 	bl	8000ab8 <HAL_InitTick>
 8001b36:	4603      	mov	r3, r0
 8001b38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08004168 	.word	0x08004168
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x34>
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d121      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d11e      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b8c:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e005      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e004      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d134      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d003      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0xac>
 8001bfc:	e005      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c00:	617b      	str	r3, [r7, #20]
      break;
 8001c02:	e005      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c06:	617b      	str	r3, [r7, #20]
      break;
 8001c08:	e002      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	617b      	str	r3, [r7, #20]
      break;
 8001c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	fb03 f202 	mul.w	r2, r3, r2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	0e5b      	lsrs	r3, r3, #25
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	3301      	adds	r3, #1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c50:	69bb      	ldr	r3, [r7, #24]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08004180 	.word	0x08004180
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	007a1200 	.word	0x007a1200

08001c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08004178 	.word	0x08004178

08001cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cb8:	f7ff ffda 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0adb      	lsrs	r3, r3, #11
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4904      	ldr	r1, [pc, #16]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08004178 	.word	0x08004178

08001ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf8:	f7ff f9ee 	bl	80010d8 <HAL_PWREx_GetVoltageRange>
 8001cfc:	6178      	str	r0, [r7, #20]
 8001cfe:	e014      	b.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0c:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d18:	f7ff f9de 	bl	80010d8 <HAL_PWREx_GetVoltageRange>
 8001d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d30:	d10b      	bne.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d919      	bls.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d3c:	d902      	bls.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e013      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e010      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b80      	cmp	r3, #128	; 0x80
 8001d4e:	d902      	bls.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d50:	2303      	movs	r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	e00a      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d102      	bne.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	e004      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b70      	cmp	r3, #112	; 0x70
 8001d66:	d101      	bne.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 0207 	bic.w	r2, r3, #7
 8001d74:	4909      	ldr	r1, [pc, #36]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da8:	2300      	movs	r3, #0
 8001daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dac:	2300      	movs	r3, #0
 8001dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d041      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dc4:	d02a      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dca:	d824      	bhi.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd0:	d008      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd6:	d81e      	bhi.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00a      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de0:	d010      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001de2:	e018      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de4:	4b86      	ldr	r3, [pc, #536]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a85      	ldr	r2, [pc, #532]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df0:	e015      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fabb 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e02:	e00c      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3320      	adds	r3, #32
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fba6 	bl	800255c <RCCEx_PLLSAI2_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e14:	e003      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	74fb      	strb	r3, [r7, #19]
      break;
 8001e1a:	e000      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e1e:	7cfb      	ldrb	r3, [r7, #19]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e24:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e32:	4973      	ldr	r1, [pc, #460]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e3a:	e001      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e3c:	7cfb      	ldrb	r3, [r7, #19]
 8001e3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d041      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e54:	d02a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e5a:	d824      	bhi.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e60:	d008      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e66:	d81e      	bhi.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d010      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e72:	e018      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e74:	4b62      	ldr	r3, [pc, #392]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a61      	ldr	r2, [pc, #388]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e80:	e015      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fa73 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e92:	e00c      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3320      	adds	r3, #32
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fb5e 	bl	800255c <RCCEx_PLLSAI2_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea4:	e003      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eaa:	e000      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb4:	4b52      	ldr	r3, [pc, #328]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec2:	494f      	ldr	r1, [pc, #316]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eca:	e001      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a0 	beq.w	800201e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	4a40      	ldr	r2, [pc, #256]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6593      	str	r3, [r2, #88]	; 0x58
 8001f04:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f14:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f20:	f7fe fe1a 	bl	8000b58 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f26:	e009      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7fe fe16 	bl	8000b58 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d902      	bls.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	74fb      	strb	r3, [r7, #19]
        break;
 8001f3a:	e005      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ef      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d15c      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01f      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d019      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	4a20      	ldr	r2, [pc, #128]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe fdd5 	bl	8000b58 <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb0:	e00b      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe fdd1 	bl	8000b58 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d902      	bls.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	74fb      	strb	r3, [r7, #19]
            break;
 8001fc8:	e006      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ec      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fee:	4904      	ldr	r1, [pc, #16]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ff6:	e009      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
 8001ffc:	e006      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200c:	7c7b      	ldrb	r3, [r7, #17]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b9e      	ldr	r3, [pc, #632]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a9d      	ldr	r2, [pc, #628]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800202a:	4b98      	ldr	r3, [pc, #608]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002030:	f023 0203 	bic.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	4994      	ldr	r1, [pc, #592]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800204c:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f023 020c 	bic.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	498c      	ldr	r1, [pc, #560]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800206e:	4b87      	ldr	r3, [pc, #540]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002074:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4983      	ldr	r1, [pc, #524]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	497b      	ldr	r1, [pc, #492]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c0:	4972      	ldr	r1, [pc, #456]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020d4:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	496a      	ldr	r1, [pc, #424]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	4961      	ldr	r1, [pc, #388]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002118:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	4959      	ldr	r1, [pc, #356]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213a:	4b54      	ldr	r3, [pc, #336]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002148:	4950      	ldr	r1, [pc, #320]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	4948      	ldr	r1, [pc, #288]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	493f      	ldr	r1, [pc, #252]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d028      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ae:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021be:	d106      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
 80021cc:	e011      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f8c8 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d028      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	491f      	ldr	r1, [pc, #124]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221c:	d106      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a1a      	ldr	r2, [pc, #104]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002228:	60d3      	str	r3, [r2, #12]
 800222a:	e011      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002234:	d10c      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f899 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02b      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226a:	4908      	ldr	r1, [pc, #32]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227a:	d109      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a02      	ldr	r2, [pc, #8]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002286:	60d3      	str	r3, [r2, #12]
 8002288:	e014      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	2101      	movs	r1, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f867 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d02f      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ce:	4928      	ldr	r1, [pc, #160]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022de:	d10d      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	2102      	movs	r1, #2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f844 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d014      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	74bb      	strb	r3, [r7, #18]
 80022fa:	e011      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002304:	d10c      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3320      	adds	r3, #32
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 f925 	bl	800255c <RCCEx_PLLSAI2_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800233a:	490d      	ldr	r1, [pc, #52]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800235e:	4904      	ldr	r1, [pc, #16]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002366:	7cbb      	ldrb	r3, [r7, #18]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000

08002374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d018      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800238e:	4b72      	ldr	r3, [pc, #456]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d10d      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
       ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
       ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d047      	beq.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e044      	b.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d018      	beq.n	80023fa <RCCEx_PLLSAI1_Config+0x86>
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d825      	bhi.n	8002418 <RCCEx_PLLSAI1_Config+0xa4>
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d002      	beq.n	80023d6 <RCCEx_PLLSAI1_Config+0x62>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d009      	beq.n	80023e8 <RCCEx_PLLSAI1_Config+0x74>
 80023d4:	e020      	b.n	8002418 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023d6:	4b60      	ldr	r3, [pc, #384]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11d      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e01a      	b.n	800241e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e8:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d116      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f8:	e013      	b.n	8002422 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002406:	4b54      	ldr	r3, [pc, #336]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002416:	e006      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e004      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
 8002420:	e002      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002426:	bf00      	nop
    }

    if(status == HAL_OK)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800242e:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	430b      	orrs	r3, r1
 8002444:	4944      	ldr	r1, [pc, #272]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d17d      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a40      	ldr	r2, [pc, #256]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800245a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fb7c 	bl	8000b58 <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002462:	e009      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002464:	f7fe fb78 	bl	8000b58 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d902      	bls.n	8002478 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	73fb      	strb	r3, [r7, #15]
        break;
 8002476:	e005      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002478:	4b37      	ldr	r3, [pc, #220]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ef      	bne.n	8002464 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d160      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	0211      	lsls	r1, r2, #8
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68d2      	ldr	r2, [r2, #12]
 80024a6:	0912      	lsrs	r2, r2, #4
 80024a8:	0452      	lsls	r2, r2, #17
 80024aa:	430a      	orrs	r2, r1
 80024ac:	492a      	ldr	r1, [pc, #168]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	610b      	str	r3, [r1, #16]
 80024b2:	e027      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d112      	bne.n	80024e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6892      	ldr	r2, [r2, #8]
 80024ca:	0211      	lsls	r1, r2, #8
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6912      	ldr	r2, [r2, #16]
 80024d0:	0852      	lsrs	r2, r2, #1
 80024d2:	3a01      	subs	r2, #1
 80024d4:	0552      	lsls	r2, r2, #21
 80024d6:	430a      	orrs	r2, r1
 80024d8:	491f      	ldr	r1, [pc, #124]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	610b      	str	r3, [r1, #16]
 80024de:	e011      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6892      	ldr	r2, [r2, #8]
 80024f0:	0211      	lsls	r1, r2, #8
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6952      	ldr	r2, [r2, #20]
 80024f6:	0852      	lsrs	r2, r2, #1
 80024f8:	3a01      	subs	r2, #1
 80024fa:	0652      	lsls	r2, r2, #25
 80024fc:	430a      	orrs	r2, r1
 80024fe:	4916      	ldr	r1, [pc, #88]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a13      	ldr	r2, [pc, #76]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800250e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe fb22 	bl	8000b58 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002516:	e009      	b.n	800252c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002518:	f7fe fb1e 	bl	8000b58 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	73fb      	strb	r3, [r7, #15]
          break;
 800252a:	e005      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4904      	ldr	r1, [pc, #16]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256a:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d10d      	bne.n	80025a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
       ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800258e:	4b61      	ldr	r3, [pc, #388]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
       ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d047      	beq.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e044      	b.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d018      	beq.n	80025e2 <RCCEx_PLLSAI2_Config+0x86>
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d825      	bhi.n	8002600 <RCCEx_PLLSAI2_Config+0xa4>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <RCCEx_PLLSAI2_Config+0x62>
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d009      	beq.n	80025d0 <RCCEx_PLLSAI2_Config+0x74>
 80025bc:	e020      	b.n	8002600 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025be:	4b55      	ldr	r3, [pc, #340]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11d      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ce:	e01a      	b.n	8002606 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d116      	bne.n	800260a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e0:	e013      	b.n	800260a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025fe:	e006      	b.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e004      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002616:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	430b      	orrs	r3, r1
 800262c:	4939      	ldr	r1, [pc, #228]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d167      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a35      	ldr	r2, [pc, #212]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe fa88 	bl	8000b58 <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800264a:	e009      	b.n	8002660 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800264c:	f7fe fa84 	bl	8000b58 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	73fb      	strb	r3, [r7, #15]
        break;
 800265e:	e005      	b.n	800266c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ef      	bne.n	800264c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d14a      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d111      	bne.n	800269c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	0912      	lsrs	r2, r2, #4
 8002690:	0452      	lsls	r2, r2, #17
 8002692:	430a      	orrs	r2, r1
 8002694:	491f      	ldr	r1, [pc, #124]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	4313      	orrs	r3, r2
 8002698:	614b      	str	r3, [r1, #20]
 800269a:	e011      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
 80026ac:	0211      	lsls	r1, r2, #8
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6912      	ldr	r2, [r2, #16]
 80026b2:	0852      	lsrs	r2, r2, #1
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0652      	lsls	r2, r2, #25
 80026b8:	430a      	orrs	r2, r1
 80026ba:	4916      	ldr	r1, [pc, #88]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a13      	ldr	r2, [pc, #76]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fa44 	bl	8000b58 <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026d2:	e009      	b.n	80026e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026d4:	f7fe fa40 	bl	8000b58 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	73fb      	strb	r3, [r7, #15]
          break;
 80026e6:	e005      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4904      	ldr	r1, [pc, #16]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002704:	4313      	orrs	r3, r2
 8002706:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e040      	b.n	80027ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe f836 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	; 0x24
 8002744:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fae0 	bl	8002d24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f825 	bl	80027b4 <UART_SetConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e01b      	b.n	80027ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fb5f 	bl	8002e68 <UART_CheckIdleState>
 80027aa:	4603      	mov	r3, r0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b8:	b08a      	sub	sp, #40	; 0x28
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	4313      	orrs	r3, r2
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4ba4      	ldr	r3, [pc, #656]	; (8002a74 <UART_SetConfig+0x2c0>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ec:	430b      	orrs	r3, r1
 80027ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a99      	ldr	r2, [pc, #612]	; (8002a78 <UART_SetConfig+0x2c4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d004      	beq.n	8002820 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	4313      	orrs	r3, r2
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a90      	ldr	r2, [pc, #576]	; (8002a7c <UART_SetConfig+0x2c8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d126      	bne.n	800288c <UART_SetConfig+0xd8>
 800283e:	4b90      	ldr	r3, [pc, #576]	; (8002a80 <UART_SetConfig+0x2cc>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b03      	cmp	r3, #3
 800284a:	d81b      	bhi.n	8002884 <UART_SetConfig+0xd0>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <UART_SetConfig+0xa0>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002865 	.word	0x08002865
 8002858:	08002875 	.word	0x08002875
 800285c:	0800286d 	.word	0x0800286d
 8002860:	0800287d 	.word	0x0800287d
 8002864:	2301      	movs	r3, #1
 8002866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800286a:	e116      	b.n	8002a9a <UART_SetConfig+0x2e6>
 800286c:	2302      	movs	r3, #2
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002872:	e112      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002874:	2304      	movs	r3, #4
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800287a:	e10e      	b.n	8002a9a <UART_SetConfig+0x2e6>
 800287c:	2308      	movs	r3, #8
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002882:	e10a      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002884:	2310      	movs	r3, #16
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800288a:	e106      	b.n	8002a9a <UART_SetConfig+0x2e6>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a7c      	ldr	r2, [pc, #496]	; (8002a84 <UART_SetConfig+0x2d0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d138      	bne.n	8002908 <UART_SetConfig+0x154>
 8002896:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <UART_SetConfig+0x2cc>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d82d      	bhi.n	8002900 <UART_SetConfig+0x14c>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <UART_SetConfig+0xf8>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028e1 	.word	0x080028e1
 80028b0:	08002901 	.word	0x08002901
 80028b4:	08002901 	.word	0x08002901
 80028b8:	08002901 	.word	0x08002901
 80028bc:	080028f1 	.word	0x080028f1
 80028c0:	08002901 	.word	0x08002901
 80028c4:	08002901 	.word	0x08002901
 80028c8:	08002901 	.word	0x08002901
 80028cc:	080028e9 	.word	0x080028e9
 80028d0:	08002901 	.word	0x08002901
 80028d4:	08002901 	.word	0x08002901
 80028d8:	08002901 	.word	0x08002901
 80028dc:	080028f9 	.word	0x080028f9
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028e6:	e0d8      	b.n	8002a9a <UART_SetConfig+0x2e6>
 80028e8:	2302      	movs	r3, #2
 80028ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ee:	e0d4      	b.n	8002a9a <UART_SetConfig+0x2e6>
 80028f0:	2304      	movs	r3, #4
 80028f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028f6:	e0d0      	b.n	8002a9a <UART_SetConfig+0x2e6>
 80028f8:	2308      	movs	r3, #8
 80028fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028fe:	e0cc      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002900:	2310      	movs	r3, #16
 8002902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002906:	e0c8      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5e      	ldr	r2, [pc, #376]	; (8002a88 <UART_SetConfig+0x2d4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d125      	bne.n	800295e <UART_SetConfig+0x1aa>
 8002912:	4b5b      	ldr	r3, [pc, #364]	; (8002a80 <UART_SetConfig+0x2cc>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800291c:	2b30      	cmp	r3, #48	; 0x30
 800291e:	d016      	beq.n	800294e <UART_SetConfig+0x19a>
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d818      	bhi.n	8002956 <UART_SetConfig+0x1a2>
 8002924:	2b20      	cmp	r3, #32
 8002926:	d00a      	beq.n	800293e <UART_SetConfig+0x18a>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d814      	bhi.n	8002956 <UART_SetConfig+0x1a2>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <UART_SetConfig+0x182>
 8002930:	2b10      	cmp	r3, #16
 8002932:	d008      	beq.n	8002946 <UART_SetConfig+0x192>
 8002934:	e00f      	b.n	8002956 <UART_SetConfig+0x1a2>
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800293c:	e0ad      	b.n	8002a9a <UART_SetConfig+0x2e6>
 800293e:	2302      	movs	r3, #2
 8002940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002944:	e0a9      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002946:	2304      	movs	r3, #4
 8002948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800294c:	e0a5      	b.n	8002a9a <UART_SetConfig+0x2e6>
 800294e:	2308      	movs	r3, #8
 8002950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002954:	e0a1      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002956:	2310      	movs	r3, #16
 8002958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800295c:	e09d      	b.n	8002a9a <UART_SetConfig+0x2e6>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a4a      	ldr	r2, [pc, #296]	; (8002a8c <UART_SetConfig+0x2d8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d125      	bne.n	80029b4 <UART_SetConfig+0x200>
 8002968:	4b45      	ldr	r3, [pc, #276]	; (8002a80 <UART_SetConfig+0x2cc>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002972:	2bc0      	cmp	r3, #192	; 0xc0
 8002974:	d016      	beq.n	80029a4 <UART_SetConfig+0x1f0>
 8002976:	2bc0      	cmp	r3, #192	; 0xc0
 8002978:	d818      	bhi.n	80029ac <UART_SetConfig+0x1f8>
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d00a      	beq.n	8002994 <UART_SetConfig+0x1e0>
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d814      	bhi.n	80029ac <UART_SetConfig+0x1f8>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <UART_SetConfig+0x1d8>
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d008      	beq.n	800299c <UART_SetConfig+0x1e8>
 800298a:	e00f      	b.n	80029ac <UART_SetConfig+0x1f8>
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002992:	e082      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002994:	2302      	movs	r3, #2
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e07e      	b.n	8002a9a <UART_SetConfig+0x2e6>
 800299c:	2304      	movs	r3, #4
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a2:	e07a      	b.n	8002a9a <UART_SetConfig+0x2e6>
 80029a4:	2308      	movs	r3, #8
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029aa:	e076      	b.n	8002a9a <UART_SetConfig+0x2e6>
 80029ac:	2310      	movs	r3, #16
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029b2:	e072      	b.n	8002a9a <UART_SetConfig+0x2e6>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a35      	ldr	r2, [pc, #212]	; (8002a90 <UART_SetConfig+0x2dc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12a      	bne.n	8002a14 <UART_SetConfig+0x260>
 80029be:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <UART_SetConfig+0x2cc>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029cc:	d01a      	beq.n	8002a04 <UART_SetConfig+0x250>
 80029ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029d2:	d81b      	bhi.n	8002a0c <UART_SetConfig+0x258>
 80029d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d8:	d00c      	beq.n	80029f4 <UART_SetConfig+0x240>
 80029da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029de:	d815      	bhi.n	8002a0c <UART_SetConfig+0x258>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <UART_SetConfig+0x238>
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e8:	d008      	beq.n	80029fc <UART_SetConfig+0x248>
 80029ea:	e00f      	b.n	8002a0c <UART_SetConfig+0x258>
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f2:	e052      	b.n	8002a9a <UART_SetConfig+0x2e6>
 80029f4:	2302      	movs	r3, #2
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fa:	e04e      	b.n	8002a9a <UART_SetConfig+0x2e6>
 80029fc:	2304      	movs	r3, #4
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a02:	e04a      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002a04:	2308      	movs	r3, #8
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0a:	e046      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a12:	e042      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <UART_SetConfig+0x2c4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d13a      	bne.n	8002a94 <UART_SetConfig+0x2e0>
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <UART_SetConfig+0x2cc>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a2c:	d01a      	beq.n	8002a64 <UART_SetConfig+0x2b0>
 8002a2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a32:	d81b      	bhi.n	8002a6c <UART_SetConfig+0x2b8>
 8002a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a38:	d00c      	beq.n	8002a54 <UART_SetConfig+0x2a0>
 8002a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a3e:	d815      	bhi.n	8002a6c <UART_SetConfig+0x2b8>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <UART_SetConfig+0x298>
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	d008      	beq.n	8002a5c <UART_SetConfig+0x2a8>
 8002a4a:	e00f      	b.n	8002a6c <UART_SetConfig+0x2b8>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a52:	e022      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002a54:	2302      	movs	r3, #2
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a5a:	e01e      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a62:	e01a      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002a64:	2308      	movs	r3, #8
 8002a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a6a:	e016      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a72:	e012      	b.n	8002a9a <UART_SetConfig+0x2e6>
 8002a74:	efff69f3 	.word	0xefff69f3
 8002a78:	40008000 	.word	0x40008000
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40004400 	.word	0x40004400
 8002a88:	40004800 	.word	0x40004800
 8002a8c:	40004c00 	.word	0x40004c00
 8002a90:	40005000 	.word	0x40005000
 8002a94:	2310      	movs	r3, #16
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a9f      	ldr	r2, [pc, #636]	; (8002d1c <UART_SetConfig+0x568>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d17a      	bne.n	8002b9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d824      	bhi.n	8002af6 <UART_SetConfig+0x342>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <UART_SetConfig+0x300>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ad9 	.word	0x08002ad9
 8002ab8:	08002af7 	.word	0x08002af7
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002af7 	.word	0x08002af7
 8002ac4:	08002ae7 	.word	0x08002ae7
 8002ac8:	08002af7 	.word	0x08002af7
 8002acc:	08002af7 	.word	0x08002af7
 8002ad0:	08002af7 	.word	0x08002af7
 8002ad4:	08002aef 	.word	0x08002aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f7ff f8d6 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002adc:	61f8      	str	r0, [r7, #28]
        break;
 8002ade:	e010      	b.n	8002b02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae0:	4b8f      	ldr	r3, [pc, #572]	; (8002d20 <UART_SetConfig+0x56c>)
 8002ae2:	61fb      	str	r3, [r7, #28]
        break;
 8002ae4:	e00d      	b.n	8002b02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae6:	f7ff f837 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002aea:	61f8      	str	r0, [r7, #28]
        break;
 8002aec:	e009      	b.n	8002b02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af2:	61fb      	str	r3, [r7, #28]
        break;
 8002af4:	e005      	b.n	8002b02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80fb 	beq.w	8002d00 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d305      	bcc.n	8002b26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d903      	bls.n	8002b2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b2c:	e0e8      	b.n	8002d00 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2200      	movs	r2, #0
 8002b32:	461c      	mov	r4, r3
 8002b34:	4615      	mov	r5, r2
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	022b      	lsls	r3, r5, #8
 8002b40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b44:	0222      	lsls	r2, r4, #8
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	6849      	ldr	r1, [r1, #4]
 8002b4a:	0849      	lsrs	r1, r1, #1
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	4688      	mov	r8, r1
 8002b50:	4681      	mov	r9, r0
 8002b52:	eb12 0a08 	adds.w	sl, r2, r8
 8002b56:	eb43 0b09 	adc.w	fp, r3, r9
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b68:	4650      	mov	r0, sl
 8002b6a:	4659      	mov	r1, fp
 8002b6c:	f7fd fb80 	bl	8000270 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4613      	mov	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b7e:	d308      	bcc.n	8002b92 <UART_SetConfig+0x3de>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b86:	d204      	bcs.n	8002b92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	e0b6      	b.n	8002d00 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b98:	e0b2      	b.n	8002d00 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba2:	d15e      	bne.n	8002c62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d828      	bhi.n	8002bfe <UART_SetConfig+0x44a>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <UART_SetConfig+0x400>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bd9 	.word	0x08002bd9
 8002bb8:	08002be1 	.word	0x08002be1
 8002bbc:	08002be9 	.word	0x08002be9
 8002bc0:	08002bff 	.word	0x08002bff
 8002bc4:	08002bef 	.word	0x08002bef
 8002bc8:	08002bff 	.word	0x08002bff
 8002bcc:	08002bff 	.word	0x08002bff
 8002bd0:	08002bff 	.word	0x08002bff
 8002bd4:	08002bf7 	.word	0x08002bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bd8:	f7ff f856 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002bdc:	61f8      	str	r0, [r7, #28]
        break;
 8002bde:	e014      	b.n	8002c0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002be0:	f7ff f868 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8002be4:	61f8      	str	r0, [r7, #28]
        break;
 8002be6:	e010      	b.n	8002c0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002be8:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <UART_SetConfig+0x56c>)
 8002bea:	61fb      	str	r3, [r7, #28]
        break;
 8002bec:	e00d      	b.n	8002c0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bee:	f7fe ffb3 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002bf2:	61f8      	str	r0, [r7, #28]
        break;
 8002bf4:	e009      	b.n	8002c0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfa:	61fb      	str	r3, [r7, #28]
        break;
 8002bfc:	e005      	b.n	8002c0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d077      	beq.n	8002d00 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005a      	lsls	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0f      	cmp	r3, #15
 8002c2a:	d916      	bls.n	8002c5a <UART_SetConfig+0x4a6>
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c32:	d212      	bcs.n	8002c5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f023 030f 	bic.w	r3, r3, #15
 8002c3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	8afa      	ldrh	r2, [r7, #22]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	e052      	b.n	8002d00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c60:	e04e      	b.n	8002d00 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d827      	bhi.n	8002cba <UART_SetConfig+0x506>
 8002c6a:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <UART_SetConfig+0x4bc>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002c95 	.word	0x08002c95
 8002c74:	08002c9d 	.word	0x08002c9d
 8002c78:	08002ca5 	.word	0x08002ca5
 8002c7c:	08002cbb 	.word	0x08002cbb
 8002c80:	08002cab 	.word	0x08002cab
 8002c84:	08002cbb 	.word	0x08002cbb
 8002c88:	08002cbb 	.word	0x08002cbb
 8002c8c:	08002cbb 	.word	0x08002cbb
 8002c90:	08002cb3 	.word	0x08002cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c94:	f7fe fff8 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002c98:	61f8      	str	r0, [r7, #28]
        break;
 8002c9a:	e014      	b.n	8002cc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c9c:	f7ff f80a 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8002ca0:	61f8      	str	r0, [r7, #28]
        break;
 8002ca2:	e010      	b.n	8002cc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <UART_SetConfig+0x56c>)
 8002ca6:	61fb      	str	r3, [r7, #28]
        break;
 8002ca8:	e00d      	b.n	8002cc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002caa:	f7fe ff55 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002cae:	61f8      	str	r0, [r7, #28]
        break;
 8002cb0:	e009      	b.n	8002cc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb6:	61fb      	str	r3, [r7, #28]
        break;
 8002cb8:	e005      	b.n	8002cc6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002cc4:	bf00      	nop
    }

    if (pclk != 0U)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d019      	beq.n	8002d00 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	085a      	lsrs	r2, r3, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	441a      	add	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	d909      	bls.n	8002cfa <UART_SetConfig+0x546>
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d205      	bcs.n	8002cfa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	e002      	b.n	8002d00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002d0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3728      	adds	r7, #40	; 0x28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40008000 	.word	0x40008000
 8002d20:	00f42400 	.word	0x00f42400

08002d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01a      	beq.n	8002e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e22:	d10a      	bne.n	8002e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b098      	sub	sp, #96	; 0x60
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e78:	f7fd fe6e 	bl	8000b58 <HAL_GetTick>
 8002e7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d12e      	bne.n	8002eea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f88c 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d021      	beq.n	8002eea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e6      	bne.n	8002ea6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e062      	b.n	8002fb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d149      	bne.n	8002f8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f00:	2200      	movs	r2, #0
 8002f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f856 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03c      	beq.n	8002f8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 8002f32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f38:	e841 2300 	strex	r3, r2, [r1]
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e6      	bne.n	8002f12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f64:	61fa      	str	r2, [r7, #28]
 8002f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	69b9      	ldr	r1, [r7, #24]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	617b      	str	r3, [r7, #20]
   return(result);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e5      	bne.n	8002f44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e011      	b.n	8002fb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3758      	adds	r7, #88	; 0x58
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc8:	e049      	b.n	800305e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d045      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fd fdc1 	bl	8000b58 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e048      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d031      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b08      	cmp	r3, #8
 8003006:	d110      	bne.n	800302a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2208      	movs	r2, #8
 800300e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f838 	bl	8003086 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2208      	movs	r2, #8
 800301a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e029      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003038:	d111      	bne.n	800305e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f81e 	bl	8003086 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e00f      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	429a      	cmp	r2, r3
 800307a:	d0a6      	beq.n	8002fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003086:	b480      	push	{r7}
 8003088:	b095      	sub	sp, #84	; 0x54
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
 80030ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e6      	bne.n	800308e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3308      	adds	r3, #8
 80030c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3308      	adds	r3, #8
 80030de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e8:	e841 2300 	strex	r3, r2, [r1]
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e5      	bne.n	80030c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d118      	bne.n	800312e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	60bb      	str	r3, [r7, #8]
   return(result);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f023 0310 	bic.w	r3, r3, #16
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311e:	6979      	ldr	r1, [r7, #20]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	613b      	str	r3, [r7, #16]
   return(result);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e6      	bne.n	80030fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003142:	bf00      	nop
 8003144:	3754      	adds	r7, #84	; 0x54
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <std>:
 8003150:	2300      	movs	r3, #0
 8003152:	b510      	push	{r4, lr}
 8003154:	4604      	mov	r4, r0
 8003156:	e9c0 3300 	strd	r3, r3, [r0]
 800315a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800315e:	6083      	str	r3, [r0, #8]
 8003160:	8181      	strh	r1, [r0, #12]
 8003162:	6643      	str	r3, [r0, #100]	; 0x64
 8003164:	81c2      	strh	r2, [r0, #14]
 8003166:	6183      	str	r3, [r0, #24]
 8003168:	4619      	mov	r1, r3
 800316a:	2208      	movs	r2, #8
 800316c:	305c      	adds	r0, #92	; 0x5c
 800316e:	f000 f9bc 	bl	80034ea <memset>
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <std+0x58>)
 8003174:	6263      	str	r3, [r4, #36]	; 0x24
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <std+0x5c>)
 8003178:	62a3      	str	r3, [r4, #40]	; 0x28
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <std+0x60>)
 800317c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <std+0x64>)
 8003180:	6323      	str	r3, [r4, #48]	; 0x30
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <std+0x68>)
 8003184:	6224      	str	r4, [r4, #32]
 8003186:	429c      	cmp	r4, r3
 8003188:	d006      	beq.n	8003198 <std+0x48>
 800318a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800318e:	4294      	cmp	r4, r2
 8003190:	d002      	beq.n	8003198 <std+0x48>
 8003192:	33d0      	adds	r3, #208	; 0xd0
 8003194:	429c      	cmp	r4, r3
 8003196:	d105      	bne.n	80031a4 <std+0x54>
 8003198:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800319c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a0:	f000 ba1c 	b.w	80035dc <__retarget_lock_init_recursive>
 80031a4:	bd10      	pop	{r4, pc}
 80031a6:	bf00      	nop
 80031a8:	08003465 	.word	0x08003465
 80031ac:	08003487 	.word	0x08003487
 80031b0:	080034bf 	.word	0x080034bf
 80031b4:	080034e3 	.word	0x080034e3
 80031b8:	20000114 	.word	0x20000114

080031bc <stdio_exit_handler>:
 80031bc:	4a02      	ldr	r2, [pc, #8]	; (80031c8 <stdio_exit_handler+0xc>)
 80031be:	4903      	ldr	r1, [pc, #12]	; (80031cc <stdio_exit_handler+0x10>)
 80031c0:	4803      	ldr	r0, [pc, #12]	; (80031d0 <stdio_exit_handler+0x14>)
 80031c2:	f000 b869 	b.w	8003298 <_fwalk_sglue>
 80031c6:	bf00      	nop
 80031c8:	2000000c 	.word	0x2000000c
 80031cc:	08003e99 	.word	0x08003e99
 80031d0:	20000018 	.word	0x20000018

080031d4 <cleanup_stdio>:
 80031d4:	6841      	ldr	r1, [r0, #4]
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <cleanup_stdio+0x34>)
 80031d8:	4299      	cmp	r1, r3
 80031da:	b510      	push	{r4, lr}
 80031dc:	4604      	mov	r4, r0
 80031de:	d001      	beq.n	80031e4 <cleanup_stdio+0x10>
 80031e0:	f000 fe5a 	bl	8003e98 <_fflush_r>
 80031e4:	68a1      	ldr	r1, [r4, #8]
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <cleanup_stdio+0x38>)
 80031e8:	4299      	cmp	r1, r3
 80031ea:	d002      	beq.n	80031f2 <cleanup_stdio+0x1e>
 80031ec:	4620      	mov	r0, r4
 80031ee:	f000 fe53 	bl	8003e98 <_fflush_r>
 80031f2:	68e1      	ldr	r1, [r4, #12]
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <cleanup_stdio+0x3c>)
 80031f6:	4299      	cmp	r1, r3
 80031f8:	d004      	beq.n	8003204 <cleanup_stdio+0x30>
 80031fa:	4620      	mov	r0, r4
 80031fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003200:	f000 be4a 	b.w	8003e98 <_fflush_r>
 8003204:	bd10      	pop	{r4, pc}
 8003206:	bf00      	nop
 8003208:	20000114 	.word	0x20000114
 800320c:	2000017c 	.word	0x2000017c
 8003210:	200001e4 	.word	0x200001e4

08003214 <global_stdio_init.part.0>:
 8003214:	b510      	push	{r4, lr}
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <global_stdio_init.part.0+0x30>)
 8003218:	4c0b      	ldr	r4, [pc, #44]	; (8003248 <global_stdio_init.part.0+0x34>)
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <global_stdio_init.part.0+0x38>)
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	4620      	mov	r0, r4
 8003220:	2200      	movs	r2, #0
 8003222:	2104      	movs	r1, #4
 8003224:	f7ff ff94 	bl	8003150 <std>
 8003228:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800322c:	2201      	movs	r2, #1
 800322e:	2109      	movs	r1, #9
 8003230:	f7ff ff8e 	bl	8003150 <std>
 8003234:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003238:	2202      	movs	r2, #2
 800323a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800323e:	2112      	movs	r1, #18
 8003240:	f7ff bf86 	b.w	8003150 <std>
 8003244:	2000024c 	.word	0x2000024c
 8003248:	20000114 	.word	0x20000114
 800324c:	080031bd 	.word	0x080031bd

08003250 <__sfp_lock_acquire>:
 8003250:	4801      	ldr	r0, [pc, #4]	; (8003258 <__sfp_lock_acquire+0x8>)
 8003252:	f000 b9c4 	b.w	80035de <__retarget_lock_acquire_recursive>
 8003256:	bf00      	nop
 8003258:	20000255 	.word	0x20000255

0800325c <__sfp_lock_release>:
 800325c:	4801      	ldr	r0, [pc, #4]	; (8003264 <__sfp_lock_release+0x8>)
 800325e:	f000 b9bf 	b.w	80035e0 <__retarget_lock_release_recursive>
 8003262:	bf00      	nop
 8003264:	20000255 	.word	0x20000255

08003268 <__sinit>:
 8003268:	b510      	push	{r4, lr}
 800326a:	4604      	mov	r4, r0
 800326c:	f7ff fff0 	bl	8003250 <__sfp_lock_acquire>
 8003270:	6a23      	ldr	r3, [r4, #32]
 8003272:	b11b      	cbz	r3, 800327c <__sinit+0x14>
 8003274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003278:	f7ff bff0 	b.w	800325c <__sfp_lock_release>
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__sinit+0x28>)
 800327e:	6223      	str	r3, [r4, #32]
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <__sinit+0x2c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f5      	bne.n	8003274 <__sinit+0xc>
 8003288:	f7ff ffc4 	bl	8003214 <global_stdio_init.part.0>
 800328c:	e7f2      	b.n	8003274 <__sinit+0xc>
 800328e:	bf00      	nop
 8003290:	080031d5 	.word	0x080031d5
 8003294:	2000024c 	.word	0x2000024c

08003298 <_fwalk_sglue>:
 8003298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800329c:	4607      	mov	r7, r0
 800329e:	4688      	mov	r8, r1
 80032a0:	4614      	mov	r4, r2
 80032a2:	2600      	movs	r6, #0
 80032a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032a8:	f1b9 0901 	subs.w	r9, r9, #1
 80032ac:	d505      	bpl.n	80032ba <_fwalk_sglue+0x22>
 80032ae:	6824      	ldr	r4, [r4, #0]
 80032b0:	2c00      	cmp	r4, #0
 80032b2:	d1f7      	bne.n	80032a4 <_fwalk_sglue+0xc>
 80032b4:	4630      	mov	r0, r6
 80032b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032ba:	89ab      	ldrh	r3, [r5, #12]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d907      	bls.n	80032d0 <_fwalk_sglue+0x38>
 80032c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032c4:	3301      	adds	r3, #1
 80032c6:	d003      	beq.n	80032d0 <_fwalk_sglue+0x38>
 80032c8:	4629      	mov	r1, r5
 80032ca:	4638      	mov	r0, r7
 80032cc:	47c0      	blx	r8
 80032ce:	4306      	orrs	r6, r0
 80032d0:	3568      	adds	r5, #104	; 0x68
 80032d2:	e7e9      	b.n	80032a8 <_fwalk_sglue+0x10>

080032d4 <iprintf>:
 80032d4:	b40f      	push	{r0, r1, r2, r3}
 80032d6:	b507      	push	{r0, r1, r2, lr}
 80032d8:	4906      	ldr	r1, [pc, #24]	; (80032f4 <iprintf+0x20>)
 80032da:	ab04      	add	r3, sp, #16
 80032dc:	6808      	ldr	r0, [r1, #0]
 80032de:	f853 2b04 	ldr.w	r2, [r3], #4
 80032e2:	6881      	ldr	r1, [r0, #8]
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	f000 faa7 	bl	8003838 <_vfiprintf_r>
 80032ea:	b003      	add	sp, #12
 80032ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80032f0:	b004      	add	sp, #16
 80032f2:	4770      	bx	lr
 80032f4:	20000064 	.word	0x20000064

080032f8 <setbuf>:
 80032f8:	fab1 f281 	clz	r2, r1
 80032fc:	0952      	lsrs	r2, r2, #5
 80032fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003302:	0052      	lsls	r2, r2, #1
 8003304:	f000 b800 	b.w	8003308 <setvbuf>

08003308 <setvbuf>:
 8003308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800330c:	461d      	mov	r5, r3
 800330e:	4b54      	ldr	r3, [pc, #336]	; (8003460 <setvbuf+0x158>)
 8003310:	681f      	ldr	r7, [r3, #0]
 8003312:	4604      	mov	r4, r0
 8003314:	460e      	mov	r6, r1
 8003316:	4690      	mov	r8, r2
 8003318:	b127      	cbz	r7, 8003324 <setvbuf+0x1c>
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	b913      	cbnz	r3, 8003324 <setvbuf+0x1c>
 800331e:	4638      	mov	r0, r7
 8003320:	f7ff ffa2 	bl	8003268 <__sinit>
 8003324:	f1b8 0f02 	cmp.w	r8, #2
 8003328:	d006      	beq.n	8003338 <setvbuf+0x30>
 800332a:	f1b8 0f01 	cmp.w	r8, #1
 800332e:	f200 8094 	bhi.w	800345a <setvbuf+0x152>
 8003332:	2d00      	cmp	r5, #0
 8003334:	f2c0 8091 	blt.w	800345a <setvbuf+0x152>
 8003338:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800333a:	07da      	lsls	r2, r3, #31
 800333c:	d405      	bmi.n	800334a <setvbuf+0x42>
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	059b      	lsls	r3, r3, #22
 8003342:	d402      	bmi.n	800334a <setvbuf+0x42>
 8003344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003346:	f000 f94a 	bl	80035de <__retarget_lock_acquire_recursive>
 800334a:	4621      	mov	r1, r4
 800334c:	4638      	mov	r0, r7
 800334e:	f000 fda3 	bl	8003e98 <_fflush_r>
 8003352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003354:	b141      	cbz	r1, 8003368 <setvbuf+0x60>
 8003356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800335a:	4299      	cmp	r1, r3
 800335c:	d002      	beq.n	8003364 <setvbuf+0x5c>
 800335e:	4638      	mov	r0, r7
 8003360:	f000 f940 	bl	80035e4 <_free_r>
 8003364:	2300      	movs	r3, #0
 8003366:	6363      	str	r3, [r4, #52]	; 0x34
 8003368:	2300      	movs	r3, #0
 800336a:	61a3      	str	r3, [r4, #24]
 800336c:	6063      	str	r3, [r4, #4]
 800336e:	89a3      	ldrh	r3, [r4, #12]
 8003370:	0618      	lsls	r0, r3, #24
 8003372:	d503      	bpl.n	800337c <setvbuf+0x74>
 8003374:	6921      	ldr	r1, [r4, #16]
 8003376:	4638      	mov	r0, r7
 8003378:	f000 f934 	bl	80035e4 <_free_r>
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	f1b8 0f02 	cmp.w	r8, #2
 800338a:	81a3      	strh	r3, [r4, #12]
 800338c:	d05f      	beq.n	800344e <setvbuf+0x146>
 800338e:	ab01      	add	r3, sp, #4
 8003390:	466a      	mov	r2, sp
 8003392:	4621      	mov	r1, r4
 8003394:	4638      	mov	r0, r7
 8003396:	f000 fda7 	bl	8003ee8 <__swhatbuf_r>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	4318      	orrs	r0, r3
 800339e:	81a0      	strh	r0, [r4, #12]
 80033a0:	bb2d      	cbnz	r5, 80033ee <setvbuf+0xe6>
 80033a2:	9d00      	ldr	r5, [sp, #0]
 80033a4:	4628      	mov	r0, r5
 80033a6:	f000 f969 	bl	800367c <malloc>
 80033aa:	4606      	mov	r6, r0
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d150      	bne.n	8003452 <setvbuf+0x14a>
 80033b0:	f8dd 9000 	ldr.w	r9, [sp]
 80033b4:	45a9      	cmp	r9, r5
 80033b6:	d13e      	bne.n	8003436 <setvbuf+0x12e>
 80033b8:	f04f 35ff 	mov.w	r5, #4294967295
 80033bc:	2200      	movs	r2, #0
 80033be:	60a2      	str	r2, [r4, #8]
 80033c0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80033c4:	6022      	str	r2, [r4, #0]
 80033c6:	6122      	str	r2, [r4, #16]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ce:	6162      	str	r2, [r4, #20]
 80033d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	07d1      	lsls	r1, r2, #31
 80033d8:	81a3      	strh	r3, [r4, #12]
 80033da:	d404      	bmi.n	80033e6 <setvbuf+0xde>
 80033dc:	059b      	lsls	r3, r3, #22
 80033de:	d402      	bmi.n	80033e6 <setvbuf+0xde>
 80033e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033e2:	f000 f8fd 	bl	80035e0 <__retarget_lock_release_recursive>
 80033e6:	4628      	mov	r0, r5
 80033e8:	b003      	add	sp, #12
 80033ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033ee:	2e00      	cmp	r6, #0
 80033f0:	d0d8      	beq.n	80033a4 <setvbuf+0x9c>
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	b913      	cbnz	r3, 80033fc <setvbuf+0xf4>
 80033f6:	4638      	mov	r0, r7
 80033f8:	f7ff ff36 	bl	8003268 <__sinit>
 80033fc:	f1b8 0f01 	cmp.w	r8, #1
 8003400:	bf08      	it	eq
 8003402:	89a3      	ldrheq	r3, [r4, #12]
 8003404:	6026      	str	r6, [r4, #0]
 8003406:	bf04      	itt	eq
 8003408:	f043 0301 	orreq.w	r3, r3, #1
 800340c:	81a3      	strheq	r3, [r4, #12]
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	f013 0208 	ands.w	r2, r3, #8
 8003414:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003418:	d01d      	beq.n	8003456 <setvbuf+0x14e>
 800341a:	07da      	lsls	r2, r3, #31
 800341c:	bf41      	itttt	mi
 800341e:	2200      	movmi	r2, #0
 8003420:	426d      	negmi	r5, r5
 8003422:	60a2      	strmi	r2, [r4, #8]
 8003424:	61a5      	strmi	r5, [r4, #24]
 8003426:	bf58      	it	pl
 8003428:	60a5      	strpl	r5, [r4, #8]
 800342a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800342c:	f015 0501 	ands.w	r5, r5, #1
 8003430:	d0d4      	beq.n	80033dc <setvbuf+0xd4>
 8003432:	2500      	movs	r5, #0
 8003434:	e7d7      	b.n	80033e6 <setvbuf+0xde>
 8003436:	4648      	mov	r0, r9
 8003438:	f000 f920 	bl	800367c <malloc>
 800343c:	4606      	mov	r6, r0
 800343e:	2800      	cmp	r0, #0
 8003440:	d0ba      	beq.n	80033b8 <setvbuf+0xb0>
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	464d      	mov	r5, r9
 800344c:	e7d1      	b.n	80033f2 <setvbuf+0xea>
 800344e:	2500      	movs	r5, #0
 8003450:	e7b4      	b.n	80033bc <setvbuf+0xb4>
 8003452:	46a9      	mov	r9, r5
 8003454:	e7f5      	b.n	8003442 <setvbuf+0x13a>
 8003456:	60a2      	str	r2, [r4, #8]
 8003458:	e7e7      	b.n	800342a <setvbuf+0x122>
 800345a:	f04f 35ff 	mov.w	r5, #4294967295
 800345e:	e7c2      	b.n	80033e6 <setvbuf+0xde>
 8003460:	20000064 	.word	0x20000064

08003464 <__sread>:
 8003464:	b510      	push	{r4, lr}
 8003466:	460c      	mov	r4, r1
 8003468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800346c:	f000 f868 	bl	8003540 <_read_r>
 8003470:	2800      	cmp	r0, #0
 8003472:	bfab      	itete	ge
 8003474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003476:	89a3      	ldrhlt	r3, [r4, #12]
 8003478:	181b      	addge	r3, r3, r0
 800347a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800347e:	bfac      	ite	ge
 8003480:	6563      	strge	r3, [r4, #84]	; 0x54
 8003482:	81a3      	strhlt	r3, [r4, #12]
 8003484:	bd10      	pop	{r4, pc}

08003486 <__swrite>:
 8003486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348a:	461f      	mov	r7, r3
 800348c:	898b      	ldrh	r3, [r1, #12]
 800348e:	05db      	lsls	r3, r3, #23
 8003490:	4605      	mov	r5, r0
 8003492:	460c      	mov	r4, r1
 8003494:	4616      	mov	r6, r2
 8003496:	d505      	bpl.n	80034a4 <__swrite+0x1e>
 8003498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349c:	2302      	movs	r3, #2
 800349e:	2200      	movs	r2, #0
 80034a0:	f000 f83c 	bl	800351c <_lseek_r>
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ae:	81a3      	strh	r3, [r4, #12]
 80034b0:	4632      	mov	r2, r6
 80034b2:	463b      	mov	r3, r7
 80034b4:	4628      	mov	r0, r5
 80034b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ba:	f000 b853 	b.w	8003564 <_write_r>

080034be <__sseek>:
 80034be:	b510      	push	{r4, lr}
 80034c0:	460c      	mov	r4, r1
 80034c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c6:	f000 f829 	bl	800351c <_lseek_r>
 80034ca:	1c43      	adds	r3, r0, #1
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	bf15      	itete	ne
 80034d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80034d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034da:	81a3      	strheq	r3, [r4, #12]
 80034dc:	bf18      	it	ne
 80034de:	81a3      	strhne	r3, [r4, #12]
 80034e0:	bd10      	pop	{r4, pc}

080034e2 <__sclose>:
 80034e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e6:	f000 b809 	b.w	80034fc <_close_r>

080034ea <memset>:
 80034ea:	4402      	add	r2, r0
 80034ec:	4603      	mov	r3, r0
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d100      	bne.n	80034f4 <memset+0xa>
 80034f2:	4770      	bx	lr
 80034f4:	f803 1b01 	strb.w	r1, [r3], #1
 80034f8:	e7f9      	b.n	80034ee <memset+0x4>
	...

080034fc <_close_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	4d06      	ldr	r5, [pc, #24]	; (8003518 <_close_r+0x1c>)
 8003500:	2300      	movs	r3, #0
 8003502:	4604      	mov	r4, r0
 8003504:	4608      	mov	r0, r1
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	f7fd fa0f 	bl	800092a <_close>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d102      	bne.n	8003516 <_close_r+0x1a>
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	b103      	cbz	r3, 8003516 <_close_r+0x1a>
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	bd38      	pop	{r3, r4, r5, pc}
 8003518:	20000250 	.word	0x20000250

0800351c <_lseek_r>:
 800351c:	b538      	push	{r3, r4, r5, lr}
 800351e:	4d07      	ldr	r5, [pc, #28]	; (800353c <_lseek_r+0x20>)
 8003520:	4604      	mov	r4, r0
 8003522:	4608      	mov	r0, r1
 8003524:	4611      	mov	r1, r2
 8003526:	2200      	movs	r2, #0
 8003528:	602a      	str	r2, [r5, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	f7fd fa24 	bl	8000978 <_lseek>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d102      	bne.n	800353a <_lseek_r+0x1e>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	b103      	cbz	r3, 800353a <_lseek_r+0x1e>
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	bd38      	pop	{r3, r4, r5, pc}
 800353c:	20000250 	.word	0x20000250

08003540 <_read_r>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	4d07      	ldr	r5, [pc, #28]	; (8003560 <_read_r+0x20>)
 8003544:	4604      	mov	r4, r0
 8003546:	4608      	mov	r0, r1
 8003548:	4611      	mov	r1, r2
 800354a:	2200      	movs	r2, #0
 800354c:	602a      	str	r2, [r5, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	f7fd f9b2 	bl	80008b8 <_read>
 8003554:	1c43      	adds	r3, r0, #1
 8003556:	d102      	bne.n	800355e <_read_r+0x1e>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	b103      	cbz	r3, 800355e <_read_r+0x1e>
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	bd38      	pop	{r3, r4, r5, pc}
 8003560:	20000250 	.word	0x20000250

08003564 <_write_r>:
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	4d07      	ldr	r5, [pc, #28]	; (8003584 <_write_r+0x20>)
 8003568:	4604      	mov	r4, r0
 800356a:	4608      	mov	r0, r1
 800356c:	4611      	mov	r1, r2
 800356e:	2200      	movs	r2, #0
 8003570:	602a      	str	r2, [r5, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	f7fd f9bd 	bl	80008f2 <_write>
 8003578:	1c43      	adds	r3, r0, #1
 800357a:	d102      	bne.n	8003582 <_write_r+0x1e>
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	b103      	cbz	r3, 8003582 <_write_r+0x1e>
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	bd38      	pop	{r3, r4, r5, pc}
 8003584:	20000250 	.word	0x20000250

08003588 <__errno>:
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <__errno+0x8>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000064 	.word	0x20000064

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	4d0d      	ldr	r5, [pc, #52]	; (80035cc <__libc_init_array+0x38>)
 8003598:	4c0d      	ldr	r4, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359a:	1b64      	subs	r4, r4, r5
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	2600      	movs	r6, #0
 80035a0:	42a6      	cmp	r6, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	4d0b      	ldr	r5, [pc, #44]	; (80035d4 <__libc_init_array+0x40>)
 80035a6:	4c0c      	ldr	r4, [pc, #48]	; (80035d8 <__libc_init_array+0x44>)
 80035a8:	f000 fdc8 	bl	800413c <_init>
 80035ac:	1b64      	subs	r4, r4, r5
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	2600      	movs	r6, #0
 80035b2:	42a6      	cmp	r6, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035bc:	4798      	blx	r3
 80035be:	3601      	adds	r6, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c6:	4798      	blx	r3
 80035c8:	3601      	adds	r6, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	080041ec 	.word	0x080041ec
 80035d0:	080041ec 	.word	0x080041ec
 80035d4:	080041ec 	.word	0x080041ec
 80035d8:	080041f0 	.word	0x080041f0

080035dc <__retarget_lock_init_recursive>:
 80035dc:	4770      	bx	lr

080035de <__retarget_lock_acquire_recursive>:
 80035de:	4770      	bx	lr

080035e0 <__retarget_lock_release_recursive>:
 80035e0:	4770      	bx	lr
	...

080035e4 <_free_r>:
 80035e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035e6:	2900      	cmp	r1, #0
 80035e8:	d044      	beq.n	8003674 <_free_r+0x90>
 80035ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035ee:	9001      	str	r0, [sp, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f1a1 0404 	sub.w	r4, r1, #4
 80035f6:	bfb8      	it	lt
 80035f8:	18e4      	addlt	r4, r4, r3
 80035fa:	f000 f8e7 	bl	80037cc <__malloc_lock>
 80035fe:	4a1e      	ldr	r2, [pc, #120]	; (8003678 <_free_r+0x94>)
 8003600:	9801      	ldr	r0, [sp, #4]
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	b933      	cbnz	r3, 8003614 <_free_r+0x30>
 8003606:	6063      	str	r3, [r4, #4]
 8003608:	6014      	str	r4, [r2, #0]
 800360a:	b003      	add	sp, #12
 800360c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003610:	f000 b8e2 	b.w	80037d8 <__malloc_unlock>
 8003614:	42a3      	cmp	r3, r4
 8003616:	d908      	bls.n	800362a <_free_r+0x46>
 8003618:	6825      	ldr	r5, [r4, #0]
 800361a:	1961      	adds	r1, r4, r5
 800361c:	428b      	cmp	r3, r1
 800361e:	bf01      	itttt	eq
 8003620:	6819      	ldreq	r1, [r3, #0]
 8003622:	685b      	ldreq	r3, [r3, #4]
 8003624:	1949      	addeq	r1, r1, r5
 8003626:	6021      	streq	r1, [r4, #0]
 8003628:	e7ed      	b.n	8003606 <_free_r+0x22>
 800362a:	461a      	mov	r2, r3
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	b10b      	cbz	r3, 8003634 <_free_r+0x50>
 8003630:	42a3      	cmp	r3, r4
 8003632:	d9fa      	bls.n	800362a <_free_r+0x46>
 8003634:	6811      	ldr	r1, [r2, #0]
 8003636:	1855      	adds	r5, r2, r1
 8003638:	42a5      	cmp	r5, r4
 800363a:	d10b      	bne.n	8003654 <_free_r+0x70>
 800363c:	6824      	ldr	r4, [r4, #0]
 800363e:	4421      	add	r1, r4
 8003640:	1854      	adds	r4, r2, r1
 8003642:	42a3      	cmp	r3, r4
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	d1e0      	bne.n	800360a <_free_r+0x26>
 8003648:	681c      	ldr	r4, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	6053      	str	r3, [r2, #4]
 800364e:	440c      	add	r4, r1
 8003650:	6014      	str	r4, [r2, #0]
 8003652:	e7da      	b.n	800360a <_free_r+0x26>
 8003654:	d902      	bls.n	800365c <_free_r+0x78>
 8003656:	230c      	movs	r3, #12
 8003658:	6003      	str	r3, [r0, #0]
 800365a:	e7d6      	b.n	800360a <_free_r+0x26>
 800365c:	6825      	ldr	r5, [r4, #0]
 800365e:	1961      	adds	r1, r4, r5
 8003660:	428b      	cmp	r3, r1
 8003662:	bf04      	itt	eq
 8003664:	6819      	ldreq	r1, [r3, #0]
 8003666:	685b      	ldreq	r3, [r3, #4]
 8003668:	6063      	str	r3, [r4, #4]
 800366a:	bf04      	itt	eq
 800366c:	1949      	addeq	r1, r1, r5
 800366e:	6021      	streq	r1, [r4, #0]
 8003670:	6054      	str	r4, [r2, #4]
 8003672:	e7ca      	b.n	800360a <_free_r+0x26>
 8003674:	b003      	add	sp, #12
 8003676:	bd30      	pop	{r4, r5, pc}
 8003678:	20000258 	.word	0x20000258

0800367c <malloc>:
 800367c:	4b02      	ldr	r3, [pc, #8]	; (8003688 <malloc+0xc>)
 800367e:	4601      	mov	r1, r0
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	f000 b823 	b.w	80036cc <_malloc_r>
 8003686:	bf00      	nop
 8003688:	20000064 	.word	0x20000064

0800368c <sbrk_aligned>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	4e0e      	ldr	r6, [pc, #56]	; (80036c8 <sbrk_aligned+0x3c>)
 8003690:	460c      	mov	r4, r1
 8003692:	6831      	ldr	r1, [r6, #0]
 8003694:	4605      	mov	r5, r0
 8003696:	b911      	cbnz	r1, 800369e <sbrk_aligned+0x12>
 8003698:	f000 fd40 	bl	800411c <_sbrk_r>
 800369c:	6030      	str	r0, [r6, #0]
 800369e:	4621      	mov	r1, r4
 80036a0:	4628      	mov	r0, r5
 80036a2:	f000 fd3b 	bl	800411c <_sbrk_r>
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d00a      	beq.n	80036c0 <sbrk_aligned+0x34>
 80036aa:	1cc4      	adds	r4, r0, #3
 80036ac:	f024 0403 	bic.w	r4, r4, #3
 80036b0:	42a0      	cmp	r0, r4
 80036b2:	d007      	beq.n	80036c4 <sbrk_aligned+0x38>
 80036b4:	1a21      	subs	r1, r4, r0
 80036b6:	4628      	mov	r0, r5
 80036b8:	f000 fd30 	bl	800411c <_sbrk_r>
 80036bc:	3001      	adds	r0, #1
 80036be:	d101      	bne.n	80036c4 <sbrk_aligned+0x38>
 80036c0:	f04f 34ff 	mov.w	r4, #4294967295
 80036c4:	4620      	mov	r0, r4
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	2000025c 	.word	0x2000025c

080036cc <_malloc_r>:
 80036cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d0:	1ccd      	adds	r5, r1, #3
 80036d2:	f025 0503 	bic.w	r5, r5, #3
 80036d6:	3508      	adds	r5, #8
 80036d8:	2d0c      	cmp	r5, #12
 80036da:	bf38      	it	cc
 80036dc:	250c      	movcc	r5, #12
 80036de:	2d00      	cmp	r5, #0
 80036e0:	4607      	mov	r7, r0
 80036e2:	db01      	blt.n	80036e8 <_malloc_r+0x1c>
 80036e4:	42a9      	cmp	r1, r5
 80036e6:	d905      	bls.n	80036f4 <_malloc_r+0x28>
 80036e8:	230c      	movs	r3, #12
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	2600      	movs	r6, #0
 80036ee:	4630      	mov	r0, r6
 80036f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037c8 <_malloc_r+0xfc>
 80036f8:	f000 f868 	bl	80037cc <__malloc_lock>
 80036fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003700:	461c      	mov	r4, r3
 8003702:	bb5c      	cbnz	r4, 800375c <_malloc_r+0x90>
 8003704:	4629      	mov	r1, r5
 8003706:	4638      	mov	r0, r7
 8003708:	f7ff ffc0 	bl	800368c <sbrk_aligned>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	4604      	mov	r4, r0
 8003710:	d155      	bne.n	80037be <_malloc_r+0xf2>
 8003712:	f8d8 4000 	ldr.w	r4, [r8]
 8003716:	4626      	mov	r6, r4
 8003718:	2e00      	cmp	r6, #0
 800371a:	d145      	bne.n	80037a8 <_malloc_r+0xdc>
 800371c:	2c00      	cmp	r4, #0
 800371e:	d048      	beq.n	80037b2 <_malloc_r+0xe6>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	4631      	mov	r1, r6
 8003724:	4638      	mov	r0, r7
 8003726:	eb04 0903 	add.w	r9, r4, r3
 800372a:	f000 fcf7 	bl	800411c <_sbrk_r>
 800372e:	4581      	cmp	r9, r0
 8003730:	d13f      	bne.n	80037b2 <_malloc_r+0xe6>
 8003732:	6821      	ldr	r1, [r4, #0]
 8003734:	1a6d      	subs	r5, r5, r1
 8003736:	4629      	mov	r1, r5
 8003738:	4638      	mov	r0, r7
 800373a:	f7ff ffa7 	bl	800368c <sbrk_aligned>
 800373e:	3001      	adds	r0, #1
 8003740:	d037      	beq.n	80037b2 <_malloc_r+0xe6>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	442b      	add	r3, r5
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	f8d8 3000 	ldr.w	r3, [r8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d038      	beq.n	80037c2 <_malloc_r+0xf6>
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	42a2      	cmp	r2, r4
 8003754:	d12b      	bne.n	80037ae <_malloc_r+0xe2>
 8003756:	2200      	movs	r2, #0
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e00f      	b.n	800377c <_malloc_r+0xb0>
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	1b52      	subs	r2, r2, r5
 8003760:	d41f      	bmi.n	80037a2 <_malloc_r+0xd6>
 8003762:	2a0b      	cmp	r2, #11
 8003764:	d917      	bls.n	8003796 <_malloc_r+0xca>
 8003766:	1961      	adds	r1, r4, r5
 8003768:	42a3      	cmp	r3, r4
 800376a:	6025      	str	r5, [r4, #0]
 800376c:	bf18      	it	ne
 800376e:	6059      	strne	r1, [r3, #4]
 8003770:	6863      	ldr	r3, [r4, #4]
 8003772:	bf08      	it	eq
 8003774:	f8c8 1000 	streq.w	r1, [r8]
 8003778:	5162      	str	r2, [r4, r5]
 800377a:	604b      	str	r3, [r1, #4]
 800377c:	4638      	mov	r0, r7
 800377e:	f104 060b 	add.w	r6, r4, #11
 8003782:	f000 f829 	bl	80037d8 <__malloc_unlock>
 8003786:	f026 0607 	bic.w	r6, r6, #7
 800378a:	1d23      	adds	r3, r4, #4
 800378c:	1af2      	subs	r2, r6, r3
 800378e:	d0ae      	beq.n	80036ee <_malloc_r+0x22>
 8003790:	1b9b      	subs	r3, r3, r6
 8003792:	50a3      	str	r3, [r4, r2]
 8003794:	e7ab      	b.n	80036ee <_malloc_r+0x22>
 8003796:	42a3      	cmp	r3, r4
 8003798:	6862      	ldr	r2, [r4, #4]
 800379a:	d1dd      	bne.n	8003758 <_malloc_r+0x8c>
 800379c:	f8c8 2000 	str.w	r2, [r8]
 80037a0:	e7ec      	b.n	800377c <_malloc_r+0xb0>
 80037a2:	4623      	mov	r3, r4
 80037a4:	6864      	ldr	r4, [r4, #4]
 80037a6:	e7ac      	b.n	8003702 <_malloc_r+0x36>
 80037a8:	4634      	mov	r4, r6
 80037aa:	6876      	ldr	r6, [r6, #4]
 80037ac:	e7b4      	b.n	8003718 <_malloc_r+0x4c>
 80037ae:	4613      	mov	r3, r2
 80037b0:	e7cc      	b.n	800374c <_malloc_r+0x80>
 80037b2:	230c      	movs	r3, #12
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4638      	mov	r0, r7
 80037b8:	f000 f80e 	bl	80037d8 <__malloc_unlock>
 80037bc:	e797      	b.n	80036ee <_malloc_r+0x22>
 80037be:	6025      	str	r5, [r4, #0]
 80037c0:	e7dc      	b.n	800377c <_malloc_r+0xb0>
 80037c2:	605b      	str	r3, [r3, #4]
 80037c4:	deff      	udf	#255	; 0xff
 80037c6:	bf00      	nop
 80037c8:	20000258 	.word	0x20000258

080037cc <__malloc_lock>:
 80037cc:	4801      	ldr	r0, [pc, #4]	; (80037d4 <__malloc_lock+0x8>)
 80037ce:	f7ff bf06 	b.w	80035de <__retarget_lock_acquire_recursive>
 80037d2:	bf00      	nop
 80037d4:	20000254 	.word	0x20000254

080037d8 <__malloc_unlock>:
 80037d8:	4801      	ldr	r0, [pc, #4]	; (80037e0 <__malloc_unlock+0x8>)
 80037da:	f7ff bf01 	b.w	80035e0 <__retarget_lock_release_recursive>
 80037de:	bf00      	nop
 80037e0:	20000254 	.word	0x20000254

080037e4 <__sfputc_r>:
 80037e4:	6893      	ldr	r3, [r2, #8]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	b410      	push	{r4}
 80037ec:	6093      	str	r3, [r2, #8]
 80037ee:	da08      	bge.n	8003802 <__sfputc_r+0x1e>
 80037f0:	6994      	ldr	r4, [r2, #24]
 80037f2:	42a3      	cmp	r3, r4
 80037f4:	db01      	blt.n	80037fa <__sfputc_r+0x16>
 80037f6:	290a      	cmp	r1, #10
 80037f8:	d103      	bne.n	8003802 <__sfputc_r+0x1e>
 80037fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037fe:	f000 bbd5 	b.w	8003fac <__swbuf_r>
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	1c58      	adds	r0, r3, #1
 8003806:	6010      	str	r0, [r2, #0]
 8003808:	7019      	strb	r1, [r3, #0]
 800380a:	4608      	mov	r0, r1
 800380c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003810:	4770      	bx	lr

08003812 <__sfputs_r>:
 8003812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003814:	4606      	mov	r6, r0
 8003816:	460f      	mov	r7, r1
 8003818:	4614      	mov	r4, r2
 800381a:	18d5      	adds	r5, r2, r3
 800381c:	42ac      	cmp	r4, r5
 800381e:	d101      	bne.n	8003824 <__sfputs_r+0x12>
 8003820:	2000      	movs	r0, #0
 8003822:	e007      	b.n	8003834 <__sfputs_r+0x22>
 8003824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003828:	463a      	mov	r2, r7
 800382a:	4630      	mov	r0, r6
 800382c:	f7ff ffda 	bl	80037e4 <__sfputc_r>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d1f3      	bne.n	800381c <__sfputs_r+0xa>
 8003834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003838 <_vfiprintf_r>:
 8003838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383c:	460d      	mov	r5, r1
 800383e:	b09d      	sub	sp, #116	; 0x74
 8003840:	4614      	mov	r4, r2
 8003842:	4698      	mov	r8, r3
 8003844:	4606      	mov	r6, r0
 8003846:	b118      	cbz	r0, 8003850 <_vfiprintf_r+0x18>
 8003848:	6a03      	ldr	r3, [r0, #32]
 800384a:	b90b      	cbnz	r3, 8003850 <_vfiprintf_r+0x18>
 800384c:	f7ff fd0c 	bl	8003268 <__sinit>
 8003850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003852:	07d9      	lsls	r1, r3, #31
 8003854:	d405      	bmi.n	8003862 <_vfiprintf_r+0x2a>
 8003856:	89ab      	ldrh	r3, [r5, #12]
 8003858:	059a      	lsls	r2, r3, #22
 800385a:	d402      	bmi.n	8003862 <_vfiprintf_r+0x2a>
 800385c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800385e:	f7ff febe 	bl	80035de <__retarget_lock_acquire_recursive>
 8003862:	89ab      	ldrh	r3, [r5, #12]
 8003864:	071b      	lsls	r3, r3, #28
 8003866:	d501      	bpl.n	800386c <_vfiprintf_r+0x34>
 8003868:	692b      	ldr	r3, [r5, #16]
 800386a:	b99b      	cbnz	r3, 8003894 <_vfiprintf_r+0x5c>
 800386c:	4629      	mov	r1, r5
 800386e:	4630      	mov	r0, r6
 8003870:	f000 fbda 	bl	8004028 <__swsetup_r>
 8003874:	b170      	cbz	r0, 8003894 <_vfiprintf_r+0x5c>
 8003876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003878:	07dc      	lsls	r4, r3, #31
 800387a:	d504      	bpl.n	8003886 <_vfiprintf_r+0x4e>
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	b01d      	add	sp, #116	; 0x74
 8003882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003886:	89ab      	ldrh	r3, [r5, #12]
 8003888:	0598      	lsls	r0, r3, #22
 800388a:	d4f7      	bmi.n	800387c <_vfiprintf_r+0x44>
 800388c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800388e:	f7ff fea7 	bl	80035e0 <__retarget_lock_release_recursive>
 8003892:	e7f3      	b.n	800387c <_vfiprintf_r+0x44>
 8003894:	2300      	movs	r3, #0
 8003896:	9309      	str	r3, [sp, #36]	; 0x24
 8003898:	2320      	movs	r3, #32
 800389a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800389e:	f8cd 800c 	str.w	r8, [sp, #12]
 80038a2:	2330      	movs	r3, #48	; 0x30
 80038a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003a58 <_vfiprintf_r+0x220>
 80038a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ac:	f04f 0901 	mov.w	r9, #1
 80038b0:	4623      	mov	r3, r4
 80038b2:	469a      	mov	sl, r3
 80038b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038b8:	b10a      	cbz	r2, 80038be <_vfiprintf_r+0x86>
 80038ba:	2a25      	cmp	r2, #37	; 0x25
 80038bc:	d1f9      	bne.n	80038b2 <_vfiprintf_r+0x7a>
 80038be:	ebba 0b04 	subs.w	fp, sl, r4
 80038c2:	d00b      	beq.n	80038dc <_vfiprintf_r+0xa4>
 80038c4:	465b      	mov	r3, fp
 80038c6:	4622      	mov	r2, r4
 80038c8:	4629      	mov	r1, r5
 80038ca:	4630      	mov	r0, r6
 80038cc:	f7ff ffa1 	bl	8003812 <__sfputs_r>
 80038d0:	3001      	adds	r0, #1
 80038d2:	f000 80a9 	beq.w	8003a28 <_vfiprintf_r+0x1f0>
 80038d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038d8:	445a      	add	r2, fp
 80038da:	9209      	str	r2, [sp, #36]	; 0x24
 80038dc:	f89a 3000 	ldrb.w	r3, [sl]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a1 	beq.w	8003a28 <_vfiprintf_r+0x1f0>
 80038e6:	2300      	movs	r3, #0
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038f0:	f10a 0a01 	add.w	sl, sl, #1
 80038f4:	9304      	str	r3, [sp, #16]
 80038f6:	9307      	str	r3, [sp, #28]
 80038f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038fc:	931a      	str	r3, [sp, #104]	; 0x68
 80038fe:	4654      	mov	r4, sl
 8003900:	2205      	movs	r2, #5
 8003902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003906:	4854      	ldr	r0, [pc, #336]	; (8003a58 <_vfiprintf_r+0x220>)
 8003908:	f7fc fc62 	bl	80001d0 <memchr>
 800390c:	9a04      	ldr	r2, [sp, #16]
 800390e:	b9d8      	cbnz	r0, 8003948 <_vfiprintf_r+0x110>
 8003910:	06d1      	lsls	r1, r2, #27
 8003912:	bf44      	itt	mi
 8003914:	2320      	movmi	r3, #32
 8003916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800391a:	0713      	lsls	r3, r2, #28
 800391c:	bf44      	itt	mi
 800391e:	232b      	movmi	r3, #43	; 0x2b
 8003920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003924:	f89a 3000 	ldrb.w	r3, [sl]
 8003928:	2b2a      	cmp	r3, #42	; 0x2a
 800392a:	d015      	beq.n	8003958 <_vfiprintf_r+0x120>
 800392c:	9a07      	ldr	r2, [sp, #28]
 800392e:	4654      	mov	r4, sl
 8003930:	2000      	movs	r0, #0
 8003932:	f04f 0c0a 	mov.w	ip, #10
 8003936:	4621      	mov	r1, r4
 8003938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800393c:	3b30      	subs	r3, #48	; 0x30
 800393e:	2b09      	cmp	r3, #9
 8003940:	d94d      	bls.n	80039de <_vfiprintf_r+0x1a6>
 8003942:	b1b0      	cbz	r0, 8003972 <_vfiprintf_r+0x13a>
 8003944:	9207      	str	r2, [sp, #28]
 8003946:	e014      	b.n	8003972 <_vfiprintf_r+0x13a>
 8003948:	eba0 0308 	sub.w	r3, r0, r8
 800394c:	fa09 f303 	lsl.w	r3, r9, r3
 8003950:	4313      	orrs	r3, r2
 8003952:	9304      	str	r3, [sp, #16]
 8003954:	46a2      	mov	sl, r4
 8003956:	e7d2      	b.n	80038fe <_vfiprintf_r+0xc6>
 8003958:	9b03      	ldr	r3, [sp, #12]
 800395a:	1d19      	adds	r1, r3, #4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	9103      	str	r1, [sp, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	bfbb      	ittet	lt
 8003964:	425b      	neglt	r3, r3
 8003966:	f042 0202 	orrlt.w	r2, r2, #2
 800396a:	9307      	strge	r3, [sp, #28]
 800396c:	9307      	strlt	r3, [sp, #28]
 800396e:	bfb8      	it	lt
 8003970:	9204      	strlt	r2, [sp, #16]
 8003972:	7823      	ldrb	r3, [r4, #0]
 8003974:	2b2e      	cmp	r3, #46	; 0x2e
 8003976:	d10c      	bne.n	8003992 <_vfiprintf_r+0x15a>
 8003978:	7863      	ldrb	r3, [r4, #1]
 800397a:	2b2a      	cmp	r3, #42	; 0x2a
 800397c:	d134      	bne.n	80039e8 <_vfiprintf_r+0x1b0>
 800397e:	9b03      	ldr	r3, [sp, #12]
 8003980:	1d1a      	adds	r2, r3, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	9203      	str	r2, [sp, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	bfb8      	it	lt
 800398a:	f04f 33ff 	movlt.w	r3, #4294967295
 800398e:	3402      	adds	r4, #2
 8003990:	9305      	str	r3, [sp, #20]
 8003992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003a68 <_vfiprintf_r+0x230>
 8003996:	7821      	ldrb	r1, [r4, #0]
 8003998:	2203      	movs	r2, #3
 800399a:	4650      	mov	r0, sl
 800399c:	f7fc fc18 	bl	80001d0 <memchr>
 80039a0:	b138      	cbz	r0, 80039b2 <_vfiprintf_r+0x17a>
 80039a2:	9b04      	ldr	r3, [sp, #16]
 80039a4:	eba0 000a 	sub.w	r0, r0, sl
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	4082      	lsls	r2, r0
 80039ac:	4313      	orrs	r3, r2
 80039ae:	3401      	adds	r4, #1
 80039b0:	9304      	str	r3, [sp, #16]
 80039b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b6:	4829      	ldr	r0, [pc, #164]	; (8003a5c <_vfiprintf_r+0x224>)
 80039b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039bc:	2206      	movs	r2, #6
 80039be:	f7fc fc07 	bl	80001d0 <memchr>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d03f      	beq.n	8003a46 <_vfiprintf_r+0x20e>
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <_vfiprintf_r+0x228>)
 80039c8:	bb1b      	cbnz	r3, 8003a12 <_vfiprintf_r+0x1da>
 80039ca:	9b03      	ldr	r3, [sp, #12]
 80039cc:	3307      	adds	r3, #7
 80039ce:	f023 0307 	bic.w	r3, r3, #7
 80039d2:	3308      	adds	r3, #8
 80039d4:	9303      	str	r3, [sp, #12]
 80039d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d8:	443b      	add	r3, r7
 80039da:	9309      	str	r3, [sp, #36]	; 0x24
 80039dc:	e768      	b.n	80038b0 <_vfiprintf_r+0x78>
 80039de:	fb0c 3202 	mla	r2, ip, r2, r3
 80039e2:	460c      	mov	r4, r1
 80039e4:	2001      	movs	r0, #1
 80039e6:	e7a6      	b.n	8003936 <_vfiprintf_r+0xfe>
 80039e8:	2300      	movs	r3, #0
 80039ea:	3401      	adds	r4, #1
 80039ec:	9305      	str	r3, [sp, #20]
 80039ee:	4619      	mov	r1, r3
 80039f0:	f04f 0c0a 	mov.w	ip, #10
 80039f4:	4620      	mov	r0, r4
 80039f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039fa:	3a30      	subs	r2, #48	; 0x30
 80039fc:	2a09      	cmp	r2, #9
 80039fe:	d903      	bls.n	8003a08 <_vfiprintf_r+0x1d0>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0c6      	beq.n	8003992 <_vfiprintf_r+0x15a>
 8003a04:	9105      	str	r1, [sp, #20]
 8003a06:	e7c4      	b.n	8003992 <_vfiprintf_r+0x15a>
 8003a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e7f0      	b.n	80039f4 <_vfiprintf_r+0x1bc>
 8003a12:	ab03      	add	r3, sp, #12
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	462a      	mov	r2, r5
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <_vfiprintf_r+0x22c>)
 8003a1a:	a904      	add	r1, sp, #16
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f3af 8000 	nop.w
 8003a22:	4607      	mov	r7, r0
 8003a24:	1c78      	adds	r0, r7, #1
 8003a26:	d1d6      	bne.n	80039d6 <_vfiprintf_r+0x19e>
 8003a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a2a:	07d9      	lsls	r1, r3, #31
 8003a2c:	d405      	bmi.n	8003a3a <_vfiprintf_r+0x202>
 8003a2e:	89ab      	ldrh	r3, [r5, #12]
 8003a30:	059a      	lsls	r2, r3, #22
 8003a32:	d402      	bmi.n	8003a3a <_vfiprintf_r+0x202>
 8003a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a36:	f7ff fdd3 	bl	80035e0 <__retarget_lock_release_recursive>
 8003a3a:	89ab      	ldrh	r3, [r5, #12]
 8003a3c:	065b      	lsls	r3, r3, #25
 8003a3e:	f53f af1d 	bmi.w	800387c <_vfiprintf_r+0x44>
 8003a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a44:	e71c      	b.n	8003880 <_vfiprintf_r+0x48>
 8003a46:	ab03      	add	r3, sp, #12
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	462a      	mov	r2, r5
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <_vfiprintf_r+0x22c>)
 8003a4e:	a904      	add	r1, sp, #16
 8003a50:	4630      	mov	r0, r6
 8003a52:	f000 f879 	bl	8003b48 <_printf_i>
 8003a56:	e7e4      	b.n	8003a22 <_vfiprintf_r+0x1ea>
 8003a58:	080041b0 	.word	0x080041b0
 8003a5c:	080041ba 	.word	0x080041ba
 8003a60:	00000000 	.word	0x00000000
 8003a64:	08003813 	.word	0x08003813
 8003a68:	080041b6 	.word	0x080041b6

08003a6c <_printf_common>:
 8003a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a70:	4616      	mov	r6, r2
 8003a72:	4699      	mov	r9, r3
 8003a74:	688a      	ldr	r2, [r1, #8]
 8003a76:	690b      	ldr	r3, [r1, #16]
 8003a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bfb8      	it	lt
 8003a80:	4613      	movlt	r3, r2
 8003a82:	6033      	str	r3, [r6, #0]
 8003a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a88:	4607      	mov	r7, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	b10a      	cbz	r2, 8003a92 <_printf_common+0x26>
 8003a8e:	3301      	adds	r3, #1
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	0699      	lsls	r1, r3, #26
 8003a96:	bf42      	ittt	mi
 8003a98:	6833      	ldrmi	r3, [r6, #0]
 8003a9a:	3302      	addmi	r3, #2
 8003a9c:	6033      	strmi	r3, [r6, #0]
 8003a9e:	6825      	ldr	r5, [r4, #0]
 8003aa0:	f015 0506 	ands.w	r5, r5, #6
 8003aa4:	d106      	bne.n	8003ab4 <_printf_common+0x48>
 8003aa6:	f104 0a19 	add.w	sl, r4, #25
 8003aaa:	68e3      	ldr	r3, [r4, #12]
 8003aac:	6832      	ldr	r2, [r6, #0]
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	42ab      	cmp	r3, r5
 8003ab2:	dc26      	bgt.n	8003b02 <_printf_common+0x96>
 8003ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ab8:	1e13      	subs	r3, r2, #0
 8003aba:	6822      	ldr	r2, [r4, #0]
 8003abc:	bf18      	it	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	0692      	lsls	r2, r2, #26
 8003ac2:	d42b      	bmi.n	8003b1c <_printf_common+0xb0>
 8003ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ac8:	4649      	mov	r1, r9
 8003aca:	4638      	mov	r0, r7
 8003acc:	47c0      	blx	r8
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d01e      	beq.n	8003b10 <_printf_common+0xa4>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	6922      	ldr	r2, [r4, #16]
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf02      	ittt	eq
 8003ade:	68e5      	ldreq	r5, [r4, #12]
 8003ae0:	6833      	ldreq	r3, [r6, #0]
 8003ae2:	1aed      	subeq	r5, r5, r3
 8003ae4:	68a3      	ldr	r3, [r4, #8]
 8003ae6:	bf0c      	ite	eq
 8003ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aec:	2500      	movne	r5, #0
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bfc4      	itt	gt
 8003af2:	1a9b      	subgt	r3, r3, r2
 8003af4:	18ed      	addgt	r5, r5, r3
 8003af6:	2600      	movs	r6, #0
 8003af8:	341a      	adds	r4, #26
 8003afa:	42b5      	cmp	r5, r6
 8003afc:	d11a      	bne.n	8003b34 <_printf_common+0xc8>
 8003afe:	2000      	movs	r0, #0
 8003b00:	e008      	b.n	8003b14 <_printf_common+0xa8>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4652      	mov	r2, sl
 8003b06:	4649      	mov	r1, r9
 8003b08:	4638      	mov	r0, r7
 8003b0a:	47c0      	blx	r8
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_printf_common+0xac>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	3501      	adds	r5, #1
 8003b1a:	e7c6      	b.n	8003aaa <_printf_common+0x3e>
 8003b1c:	18e1      	adds	r1, r4, r3
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	2030      	movs	r0, #48	; 0x30
 8003b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b26:	4422      	add	r2, r4
 8003b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b30:	3302      	adds	r3, #2
 8003b32:	e7c7      	b.n	8003ac4 <_printf_common+0x58>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4622      	mov	r2, r4
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0e6      	beq.n	8003b10 <_printf_common+0xa4>
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7d9      	b.n	8003afa <_printf_common+0x8e>
	...

08003b48 <_printf_i>:
 8003b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	7e0f      	ldrb	r7, [r1, #24]
 8003b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b50:	2f78      	cmp	r7, #120	; 0x78
 8003b52:	4691      	mov	r9, r2
 8003b54:	4680      	mov	r8, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	469a      	mov	sl, r3
 8003b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b5e:	d807      	bhi.n	8003b70 <_printf_i+0x28>
 8003b60:	2f62      	cmp	r7, #98	; 0x62
 8003b62:	d80a      	bhi.n	8003b7a <_printf_i+0x32>
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	f000 80d4 	beq.w	8003d12 <_printf_i+0x1ca>
 8003b6a:	2f58      	cmp	r7, #88	; 0x58
 8003b6c:	f000 80c0 	beq.w	8003cf0 <_printf_i+0x1a8>
 8003b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b78:	e03a      	b.n	8003bf0 <_printf_i+0xa8>
 8003b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b7e:	2b15      	cmp	r3, #21
 8003b80:	d8f6      	bhi.n	8003b70 <_printf_i+0x28>
 8003b82:	a101      	add	r1, pc, #4	; (adr r1, 8003b88 <_printf_i+0x40>)
 8003b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003b71 	.word	0x08003b71
 8003b94:	08003b71 	.word	0x08003b71
 8003b98:	08003b71 	.word	0x08003b71
 8003b9c:	08003b71 	.word	0x08003b71
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b71 	.word	0x08003b71
 8003ba8:	08003b71 	.word	0x08003b71
 8003bac:	08003b71 	.word	0x08003b71
 8003bb0:	08003b71 	.word	0x08003b71
 8003bb4:	08003cf9 	.word	0x08003cf9
 8003bb8:	08003c21 	.word	0x08003c21
 8003bbc:	08003cb3 	.word	0x08003cb3
 8003bc0:	08003b71 	.word	0x08003b71
 8003bc4:	08003b71 	.word	0x08003b71
 8003bc8:	08003d1b 	.word	0x08003d1b
 8003bcc:	08003b71 	.word	0x08003b71
 8003bd0:	08003c21 	.word	0x08003c21
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003b71 	.word	0x08003b71
 8003bdc:	08003cbb 	.word	0x08003cbb
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	602a      	str	r2, [r5, #0]
 8003be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e09f      	b.n	8003d34 <_printf_i+0x1ec>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	682b      	ldr	r3, [r5, #0]
 8003bf8:	0607      	lsls	r7, r0, #24
 8003bfa:	f103 0104 	add.w	r1, r3, #4
 8003bfe:	6029      	str	r1, [r5, #0]
 8003c00:	d501      	bpl.n	8003c06 <_printf_i+0xbe>
 8003c02:	681e      	ldr	r6, [r3, #0]
 8003c04:	e003      	b.n	8003c0e <_printf_i+0xc6>
 8003c06:	0646      	lsls	r6, r0, #25
 8003c08:	d5fb      	bpl.n	8003c02 <_printf_i+0xba>
 8003c0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c0e:	2e00      	cmp	r6, #0
 8003c10:	da03      	bge.n	8003c1a <_printf_i+0xd2>
 8003c12:	232d      	movs	r3, #45	; 0x2d
 8003c14:	4276      	negs	r6, r6
 8003c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c1a:	485a      	ldr	r0, [pc, #360]	; (8003d84 <_printf_i+0x23c>)
 8003c1c:	230a      	movs	r3, #10
 8003c1e:	e012      	b.n	8003c46 <_printf_i+0xfe>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	1d19      	adds	r1, r3, #4
 8003c26:	6029      	str	r1, [r5, #0]
 8003c28:	0605      	lsls	r5, r0, #24
 8003c2a:	d501      	bpl.n	8003c30 <_printf_i+0xe8>
 8003c2c:	681e      	ldr	r6, [r3, #0]
 8003c2e:	e002      	b.n	8003c36 <_printf_i+0xee>
 8003c30:	0641      	lsls	r1, r0, #25
 8003c32:	d5fb      	bpl.n	8003c2c <_printf_i+0xe4>
 8003c34:	881e      	ldrh	r6, [r3, #0]
 8003c36:	4853      	ldr	r0, [pc, #332]	; (8003d84 <_printf_i+0x23c>)
 8003c38:	2f6f      	cmp	r7, #111	; 0x6f
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2308      	moveq	r3, #8
 8003c3e:	230a      	movne	r3, #10
 8003c40:	2100      	movs	r1, #0
 8003c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c46:	6865      	ldr	r5, [r4, #4]
 8003c48:	60a5      	str	r5, [r4, #8]
 8003c4a:	2d00      	cmp	r5, #0
 8003c4c:	bfa2      	ittt	ge
 8003c4e:	6821      	ldrge	r1, [r4, #0]
 8003c50:	f021 0104 	bicge.w	r1, r1, #4
 8003c54:	6021      	strge	r1, [r4, #0]
 8003c56:	b90e      	cbnz	r6, 8003c5c <_printf_i+0x114>
 8003c58:	2d00      	cmp	r5, #0
 8003c5a:	d04b      	beq.n	8003cf4 <_printf_i+0x1ac>
 8003c5c:	4615      	mov	r5, r2
 8003c5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c62:	fb03 6711 	mls	r7, r3, r1, r6
 8003c66:	5dc7      	ldrb	r7, [r0, r7]
 8003c68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c6c:	4637      	mov	r7, r6
 8003c6e:	42bb      	cmp	r3, r7
 8003c70:	460e      	mov	r6, r1
 8003c72:	d9f4      	bls.n	8003c5e <_printf_i+0x116>
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d10b      	bne.n	8003c90 <_printf_i+0x148>
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	07de      	lsls	r6, r3, #31
 8003c7c:	d508      	bpl.n	8003c90 <_printf_i+0x148>
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	6861      	ldr	r1, [r4, #4]
 8003c82:	4299      	cmp	r1, r3
 8003c84:	bfde      	ittt	le
 8003c86:	2330      	movle	r3, #48	; 0x30
 8003c88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c90:	1b52      	subs	r2, r2, r5
 8003c92:	6122      	str	r2, [r4, #16]
 8003c94:	f8cd a000 	str.w	sl, [sp]
 8003c98:	464b      	mov	r3, r9
 8003c9a:	aa03      	add	r2, sp, #12
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f7ff fee4 	bl	8003a6c <_printf_common>
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d14a      	bne.n	8003d3e <_printf_i+0x1f6>
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	b004      	add	sp, #16
 8003cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	f043 0320 	orr.w	r3, r3, #32
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	4833      	ldr	r0, [pc, #204]	; (8003d88 <_printf_i+0x240>)
 8003cbc:	2778      	movs	r7, #120	; 0x78
 8003cbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	6829      	ldr	r1, [r5, #0]
 8003cc6:	061f      	lsls	r7, r3, #24
 8003cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ccc:	d402      	bmi.n	8003cd4 <_printf_i+0x18c>
 8003cce:	065f      	lsls	r7, r3, #25
 8003cd0:	bf48      	it	mi
 8003cd2:	b2b6      	uxthmi	r6, r6
 8003cd4:	07df      	lsls	r7, r3, #31
 8003cd6:	bf48      	it	mi
 8003cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8003cdc:	6029      	str	r1, [r5, #0]
 8003cde:	bf48      	it	mi
 8003ce0:	6023      	strmi	r3, [r4, #0]
 8003ce2:	b91e      	cbnz	r6, 8003cec <_printf_i+0x1a4>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f023 0320 	bic.w	r3, r3, #32
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	2310      	movs	r3, #16
 8003cee:	e7a7      	b.n	8003c40 <_printf_i+0xf8>
 8003cf0:	4824      	ldr	r0, [pc, #144]	; (8003d84 <_printf_i+0x23c>)
 8003cf2:	e7e4      	b.n	8003cbe <_printf_i+0x176>
 8003cf4:	4615      	mov	r5, r2
 8003cf6:	e7bd      	b.n	8003c74 <_printf_i+0x12c>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	6826      	ldr	r6, [r4, #0]
 8003cfc:	6961      	ldr	r1, [r4, #20]
 8003cfe:	1d18      	adds	r0, r3, #4
 8003d00:	6028      	str	r0, [r5, #0]
 8003d02:	0635      	lsls	r5, r6, #24
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	d501      	bpl.n	8003d0c <_printf_i+0x1c4>
 8003d08:	6019      	str	r1, [r3, #0]
 8003d0a:	e002      	b.n	8003d12 <_printf_i+0x1ca>
 8003d0c:	0670      	lsls	r0, r6, #25
 8003d0e:	d5fb      	bpl.n	8003d08 <_printf_i+0x1c0>
 8003d10:	8019      	strh	r1, [r3, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	6123      	str	r3, [r4, #16]
 8003d16:	4615      	mov	r5, r2
 8003d18:	e7bc      	b.n	8003c94 <_printf_i+0x14c>
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	1d1a      	adds	r2, r3, #4
 8003d1e:	602a      	str	r2, [r5, #0]
 8003d20:	681d      	ldr	r5, [r3, #0]
 8003d22:	6862      	ldr	r2, [r4, #4]
 8003d24:	2100      	movs	r1, #0
 8003d26:	4628      	mov	r0, r5
 8003d28:	f7fc fa52 	bl	80001d0 <memchr>
 8003d2c:	b108      	cbz	r0, 8003d32 <_printf_i+0x1ea>
 8003d2e:	1b40      	subs	r0, r0, r5
 8003d30:	6060      	str	r0, [r4, #4]
 8003d32:	6863      	ldr	r3, [r4, #4]
 8003d34:	6123      	str	r3, [r4, #16]
 8003d36:	2300      	movs	r3, #0
 8003d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d3c:	e7aa      	b.n	8003c94 <_printf_i+0x14c>
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	462a      	mov	r2, r5
 8003d42:	4649      	mov	r1, r9
 8003d44:	4640      	mov	r0, r8
 8003d46:	47d0      	blx	sl
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d0ad      	beq.n	8003ca8 <_printf_i+0x160>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	079b      	lsls	r3, r3, #30
 8003d50:	d413      	bmi.n	8003d7a <_printf_i+0x232>
 8003d52:	68e0      	ldr	r0, [r4, #12]
 8003d54:	9b03      	ldr	r3, [sp, #12]
 8003d56:	4298      	cmp	r0, r3
 8003d58:	bfb8      	it	lt
 8003d5a:	4618      	movlt	r0, r3
 8003d5c:	e7a6      	b.n	8003cac <_printf_i+0x164>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4632      	mov	r2, r6
 8003d62:	4649      	mov	r1, r9
 8003d64:	4640      	mov	r0, r8
 8003d66:	47d0      	blx	sl
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d09d      	beq.n	8003ca8 <_printf_i+0x160>
 8003d6c:	3501      	adds	r5, #1
 8003d6e:	68e3      	ldr	r3, [r4, #12]
 8003d70:	9903      	ldr	r1, [sp, #12]
 8003d72:	1a5b      	subs	r3, r3, r1
 8003d74:	42ab      	cmp	r3, r5
 8003d76:	dcf2      	bgt.n	8003d5e <_printf_i+0x216>
 8003d78:	e7eb      	b.n	8003d52 <_printf_i+0x20a>
 8003d7a:	2500      	movs	r5, #0
 8003d7c:	f104 0619 	add.w	r6, r4, #25
 8003d80:	e7f5      	b.n	8003d6e <_printf_i+0x226>
 8003d82:	bf00      	nop
 8003d84:	080041c1 	.word	0x080041c1
 8003d88:	080041d2 	.word	0x080041d2

08003d8c <__sflush_r>:
 8003d8c:	898a      	ldrh	r2, [r1, #12]
 8003d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d92:	4605      	mov	r5, r0
 8003d94:	0710      	lsls	r0, r2, #28
 8003d96:	460c      	mov	r4, r1
 8003d98:	d458      	bmi.n	8003e4c <__sflush_r+0xc0>
 8003d9a:	684b      	ldr	r3, [r1, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	dc05      	bgt.n	8003dac <__sflush_r+0x20>
 8003da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dc02      	bgt.n	8003dac <__sflush_r+0x20>
 8003da6:	2000      	movs	r0, #0
 8003da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dae:	2e00      	cmp	r6, #0
 8003db0:	d0f9      	beq.n	8003da6 <__sflush_r+0x1a>
 8003db2:	2300      	movs	r3, #0
 8003db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003db8:	682f      	ldr	r7, [r5, #0]
 8003dba:	6a21      	ldr	r1, [r4, #32]
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	d032      	beq.n	8003e26 <__sflush_r+0x9a>
 8003dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	075a      	lsls	r2, r3, #29
 8003dc6:	d505      	bpl.n	8003dd4 <__sflush_r+0x48>
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	1ac0      	subs	r0, r0, r3
 8003dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dce:	b10b      	cbz	r3, 8003dd4 <__sflush_r+0x48>
 8003dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dd2:	1ac0      	subs	r0, r0, r3
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dda:	6a21      	ldr	r1, [r4, #32]
 8003ddc:	4628      	mov	r0, r5
 8003dde:	47b0      	blx	r6
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	d106      	bne.n	8003df4 <__sflush_r+0x68>
 8003de6:	6829      	ldr	r1, [r5, #0]
 8003de8:	291d      	cmp	r1, #29
 8003dea:	d82b      	bhi.n	8003e44 <__sflush_r+0xb8>
 8003dec:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <__sflush_r+0x108>)
 8003dee:	410a      	asrs	r2, r1
 8003df0:	07d6      	lsls	r6, r2, #31
 8003df2:	d427      	bmi.n	8003e44 <__sflush_r+0xb8>
 8003df4:	2200      	movs	r2, #0
 8003df6:	6062      	str	r2, [r4, #4]
 8003df8:	04d9      	lsls	r1, r3, #19
 8003dfa:	6922      	ldr	r2, [r4, #16]
 8003dfc:	6022      	str	r2, [r4, #0]
 8003dfe:	d504      	bpl.n	8003e0a <__sflush_r+0x7e>
 8003e00:	1c42      	adds	r2, r0, #1
 8003e02:	d101      	bne.n	8003e08 <__sflush_r+0x7c>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b903      	cbnz	r3, 8003e0a <__sflush_r+0x7e>
 8003e08:	6560      	str	r0, [r4, #84]	; 0x54
 8003e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e0c:	602f      	str	r7, [r5, #0]
 8003e0e:	2900      	cmp	r1, #0
 8003e10:	d0c9      	beq.n	8003da6 <__sflush_r+0x1a>
 8003e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e16:	4299      	cmp	r1, r3
 8003e18:	d002      	beq.n	8003e20 <__sflush_r+0x94>
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f7ff fbe2 	bl	80035e4 <_free_r>
 8003e20:	2000      	movs	r0, #0
 8003e22:	6360      	str	r0, [r4, #52]	; 0x34
 8003e24:	e7c0      	b.n	8003da8 <__sflush_r+0x1c>
 8003e26:	2301      	movs	r3, #1
 8003e28:	4628      	mov	r0, r5
 8003e2a:	47b0      	blx	r6
 8003e2c:	1c41      	adds	r1, r0, #1
 8003e2e:	d1c8      	bne.n	8003dc2 <__sflush_r+0x36>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0c5      	beq.n	8003dc2 <__sflush_r+0x36>
 8003e36:	2b1d      	cmp	r3, #29
 8003e38:	d001      	beq.n	8003e3e <__sflush_r+0xb2>
 8003e3a:	2b16      	cmp	r3, #22
 8003e3c:	d101      	bne.n	8003e42 <__sflush_r+0xb6>
 8003e3e:	602f      	str	r7, [r5, #0]
 8003e40:	e7b1      	b.n	8003da6 <__sflush_r+0x1a>
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e48:	81a3      	strh	r3, [r4, #12]
 8003e4a:	e7ad      	b.n	8003da8 <__sflush_r+0x1c>
 8003e4c:	690f      	ldr	r7, [r1, #16]
 8003e4e:	2f00      	cmp	r7, #0
 8003e50:	d0a9      	beq.n	8003da6 <__sflush_r+0x1a>
 8003e52:	0793      	lsls	r3, r2, #30
 8003e54:	680e      	ldr	r6, [r1, #0]
 8003e56:	bf08      	it	eq
 8003e58:	694b      	ldreq	r3, [r1, #20]
 8003e5a:	600f      	str	r7, [r1, #0]
 8003e5c:	bf18      	it	ne
 8003e5e:	2300      	movne	r3, #0
 8003e60:	eba6 0807 	sub.w	r8, r6, r7
 8003e64:	608b      	str	r3, [r1, #8]
 8003e66:	f1b8 0f00 	cmp.w	r8, #0
 8003e6a:	dd9c      	ble.n	8003da6 <__sflush_r+0x1a>
 8003e6c:	6a21      	ldr	r1, [r4, #32]
 8003e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e70:	4643      	mov	r3, r8
 8003e72:	463a      	mov	r2, r7
 8003e74:	4628      	mov	r0, r5
 8003e76:	47b0      	blx	r6
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	dc06      	bgt.n	8003e8a <__sflush_r+0xfe>
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e82:	81a3      	strh	r3, [r4, #12]
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	e78e      	b.n	8003da8 <__sflush_r+0x1c>
 8003e8a:	4407      	add	r7, r0
 8003e8c:	eba8 0800 	sub.w	r8, r8, r0
 8003e90:	e7e9      	b.n	8003e66 <__sflush_r+0xda>
 8003e92:	bf00      	nop
 8003e94:	dfbffffe 	.word	0xdfbffffe

08003e98 <_fflush_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	690b      	ldr	r3, [r1, #16]
 8003e9c:	4605      	mov	r5, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	b913      	cbnz	r3, 8003ea8 <_fflush_r+0x10>
 8003ea2:	2500      	movs	r5, #0
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	bd38      	pop	{r3, r4, r5, pc}
 8003ea8:	b118      	cbz	r0, 8003eb2 <_fflush_r+0x1a>
 8003eaa:	6a03      	ldr	r3, [r0, #32]
 8003eac:	b90b      	cbnz	r3, 8003eb2 <_fflush_r+0x1a>
 8003eae:	f7ff f9db 	bl	8003268 <__sinit>
 8003eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f3      	beq.n	8003ea2 <_fflush_r+0xa>
 8003eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ebc:	07d0      	lsls	r0, r2, #31
 8003ebe:	d404      	bmi.n	8003eca <_fflush_r+0x32>
 8003ec0:	0599      	lsls	r1, r3, #22
 8003ec2:	d402      	bmi.n	8003eca <_fflush_r+0x32>
 8003ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ec6:	f7ff fb8a 	bl	80035de <__retarget_lock_acquire_recursive>
 8003eca:	4628      	mov	r0, r5
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f7ff ff5d 	bl	8003d8c <__sflush_r>
 8003ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed4:	07da      	lsls	r2, r3, #31
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	d4e4      	bmi.n	8003ea4 <_fflush_r+0xc>
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	059b      	lsls	r3, r3, #22
 8003ede:	d4e1      	bmi.n	8003ea4 <_fflush_r+0xc>
 8003ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ee2:	f7ff fb7d 	bl	80035e0 <__retarget_lock_release_recursive>
 8003ee6:	e7dd      	b.n	8003ea4 <_fflush_r+0xc>

08003ee8 <__swhatbuf_r>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	460c      	mov	r4, r1
 8003eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef0:	2900      	cmp	r1, #0
 8003ef2:	b096      	sub	sp, #88	; 0x58
 8003ef4:	4615      	mov	r5, r2
 8003ef6:	461e      	mov	r6, r3
 8003ef8:	da0d      	bge.n	8003f16 <__swhatbuf_r+0x2e>
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	bf0c      	ite	eq
 8003f06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003f0a:	2340      	movne	r3, #64	; 0x40
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	6031      	str	r1, [r6, #0]
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	b016      	add	sp, #88	; 0x58
 8003f14:	bd70      	pop	{r4, r5, r6, pc}
 8003f16:	466a      	mov	r2, sp
 8003f18:	f000 f8de 	bl	80040d8 <_fstat_r>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	dbec      	blt.n	8003efa <__swhatbuf_r+0x12>
 8003f20:	9901      	ldr	r1, [sp, #4]
 8003f22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f2a:	4259      	negs	r1, r3
 8003f2c:	4159      	adcs	r1, r3
 8003f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f32:	e7eb      	b.n	8003f0c <__swhatbuf_r+0x24>

08003f34 <__smakebuf_r>:
 8003f34:	898b      	ldrh	r3, [r1, #12]
 8003f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f38:	079d      	lsls	r5, r3, #30
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	d507      	bpl.n	8003f50 <__smakebuf_r+0x1c>
 8003f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	2301      	movs	r3, #1
 8003f4a:	6163      	str	r3, [r4, #20]
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	ab01      	add	r3, sp, #4
 8003f52:	466a      	mov	r2, sp
 8003f54:	f7ff ffc8 	bl	8003ee8 <__swhatbuf_r>
 8003f58:	9900      	ldr	r1, [sp, #0]
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	f7ff fbb5 	bl	80036cc <_malloc_r>
 8003f62:	b948      	cbnz	r0, 8003f78 <__smakebuf_r+0x44>
 8003f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f68:	059a      	lsls	r2, r3, #22
 8003f6a:	d4ef      	bmi.n	8003f4c <__smakebuf_r+0x18>
 8003f6c:	f023 0303 	bic.w	r3, r3, #3
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	81a3      	strh	r3, [r4, #12]
 8003f76:	e7e3      	b.n	8003f40 <__smakebuf_r+0xc>
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	6020      	str	r0, [r4, #0]
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f80:	81a3      	strh	r3, [r4, #12]
 8003f82:	9b00      	ldr	r3, [sp, #0]
 8003f84:	6163      	str	r3, [r4, #20]
 8003f86:	9b01      	ldr	r3, [sp, #4]
 8003f88:	6120      	str	r0, [r4, #16]
 8003f8a:	b15b      	cbz	r3, 8003fa4 <__smakebuf_r+0x70>
 8003f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f90:	4630      	mov	r0, r6
 8003f92:	f000 f8b3 	bl	80040fc <_isatty_r>
 8003f96:	b128      	cbz	r0, 8003fa4 <__smakebuf_r+0x70>
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	431d      	orrs	r5, r3
 8003fa8:	81a5      	strh	r5, [r4, #12]
 8003faa:	e7cf      	b.n	8003f4c <__smakebuf_r+0x18>

08003fac <__swbuf_r>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	460e      	mov	r6, r1
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	b118      	cbz	r0, 8003fbe <__swbuf_r+0x12>
 8003fb6:	6a03      	ldr	r3, [r0, #32]
 8003fb8:	b90b      	cbnz	r3, 8003fbe <__swbuf_r+0x12>
 8003fba:	f7ff f955 	bl	8003268 <__sinit>
 8003fbe:	69a3      	ldr	r3, [r4, #24]
 8003fc0:	60a3      	str	r3, [r4, #8]
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	071a      	lsls	r2, r3, #28
 8003fc6:	d525      	bpl.n	8004014 <__swbuf_r+0x68>
 8003fc8:	6923      	ldr	r3, [r4, #16]
 8003fca:	b31b      	cbz	r3, 8004014 <__swbuf_r+0x68>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	6922      	ldr	r2, [r4, #16]
 8003fd0:	1a98      	subs	r0, r3, r2
 8003fd2:	6963      	ldr	r3, [r4, #20]
 8003fd4:	b2f6      	uxtb	r6, r6
 8003fd6:	4283      	cmp	r3, r0
 8003fd8:	4637      	mov	r7, r6
 8003fda:	dc04      	bgt.n	8003fe6 <__swbuf_r+0x3a>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f7ff ff5a 	bl	8003e98 <_fflush_r>
 8003fe4:	b9e0      	cbnz	r0, 8004020 <__swbuf_r+0x74>
 8003fe6:	68a3      	ldr	r3, [r4, #8]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	60a3      	str	r3, [r4, #8]
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	6022      	str	r2, [r4, #0]
 8003ff2:	701e      	strb	r6, [r3, #0]
 8003ff4:	6962      	ldr	r2, [r4, #20]
 8003ff6:	1c43      	adds	r3, r0, #1
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d004      	beq.n	8004006 <__swbuf_r+0x5a>
 8003ffc:	89a3      	ldrh	r3, [r4, #12]
 8003ffe:	07db      	lsls	r3, r3, #31
 8004000:	d506      	bpl.n	8004010 <__swbuf_r+0x64>
 8004002:	2e0a      	cmp	r6, #10
 8004004:	d104      	bne.n	8004010 <__swbuf_r+0x64>
 8004006:	4621      	mov	r1, r4
 8004008:	4628      	mov	r0, r5
 800400a:	f7ff ff45 	bl	8003e98 <_fflush_r>
 800400e:	b938      	cbnz	r0, 8004020 <__swbuf_r+0x74>
 8004010:	4638      	mov	r0, r7
 8004012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004014:	4621      	mov	r1, r4
 8004016:	4628      	mov	r0, r5
 8004018:	f000 f806 	bl	8004028 <__swsetup_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	d0d5      	beq.n	8003fcc <__swbuf_r+0x20>
 8004020:	f04f 37ff 	mov.w	r7, #4294967295
 8004024:	e7f4      	b.n	8004010 <__swbuf_r+0x64>
	...

08004028 <__swsetup_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <__swsetup_r+0xac>)
 800402c:	4605      	mov	r5, r0
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	460c      	mov	r4, r1
 8004032:	b118      	cbz	r0, 800403c <__swsetup_r+0x14>
 8004034:	6a03      	ldr	r3, [r0, #32]
 8004036:	b90b      	cbnz	r3, 800403c <__swsetup_r+0x14>
 8004038:	f7ff f916 	bl	8003268 <__sinit>
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004042:	0718      	lsls	r0, r3, #28
 8004044:	d422      	bmi.n	800408c <__swsetup_r+0x64>
 8004046:	06d9      	lsls	r1, r3, #27
 8004048:	d407      	bmi.n	800405a <__swsetup_r+0x32>
 800404a:	2309      	movs	r3, #9
 800404c:	602b      	str	r3, [r5, #0]
 800404e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	e034      	b.n	80040c4 <__swsetup_r+0x9c>
 800405a:	0758      	lsls	r0, r3, #29
 800405c:	d512      	bpl.n	8004084 <__swsetup_r+0x5c>
 800405e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004060:	b141      	cbz	r1, 8004074 <__swsetup_r+0x4c>
 8004062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004066:	4299      	cmp	r1, r3
 8004068:	d002      	beq.n	8004070 <__swsetup_r+0x48>
 800406a:	4628      	mov	r0, r5
 800406c:	f7ff faba 	bl	80035e4 <_free_r>
 8004070:	2300      	movs	r3, #0
 8004072:	6363      	str	r3, [r4, #52]	; 0x34
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	2300      	movs	r3, #0
 800407e:	6063      	str	r3, [r4, #4]
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f043 0308 	orr.w	r3, r3, #8
 800408a:	81a3      	strh	r3, [r4, #12]
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	b94b      	cbnz	r3, 80040a4 <__swsetup_r+0x7c>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409a:	d003      	beq.n	80040a4 <__swsetup_r+0x7c>
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f7ff ff48 	bl	8003f34 <__smakebuf_r>
 80040a4:	89a0      	ldrh	r0, [r4, #12]
 80040a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040aa:	f010 0301 	ands.w	r3, r0, #1
 80040ae:	d00a      	beq.n	80040c6 <__swsetup_r+0x9e>
 80040b0:	2300      	movs	r3, #0
 80040b2:	60a3      	str	r3, [r4, #8]
 80040b4:	6963      	ldr	r3, [r4, #20]
 80040b6:	425b      	negs	r3, r3
 80040b8:	61a3      	str	r3, [r4, #24]
 80040ba:	6923      	ldr	r3, [r4, #16]
 80040bc:	b943      	cbnz	r3, 80040d0 <__swsetup_r+0xa8>
 80040be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040c2:	d1c4      	bne.n	800404e <__swsetup_r+0x26>
 80040c4:	bd38      	pop	{r3, r4, r5, pc}
 80040c6:	0781      	lsls	r1, r0, #30
 80040c8:	bf58      	it	pl
 80040ca:	6963      	ldrpl	r3, [r4, #20]
 80040cc:	60a3      	str	r3, [r4, #8]
 80040ce:	e7f4      	b.n	80040ba <__swsetup_r+0x92>
 80040d0:	2000      	movs	r0, #0
 80040d2:	e7f7      	b.n	80040c4 <__swsetup_r+0x9c>
 80040d4:	20000064 	.word	0x20000064

080040d8 <_fstat_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d07      	ldr	r5, [pc, #28]	; (80040f8 <_fstat_r+0x20>)
 80040dc:	2300      	movs	r3, #0
 80040de:	4604      	mov	r4, r0
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	f7fc fc2c 	bl	8000942 <_fstat>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d102      	bne.n	80040f4 <_fstat_r+0x1c>
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	b103      	cbz	r3, 80040f4 <_fstat_r+0x1c>
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	bd38      	pop	{r3, r4, r5, pc}
 80040f6:	bf00      	nop
 80040f8:	20000250 	.word	0x20000250

080040fc <_isatty_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d06      	ldr	r5, [pc, #24]	; (8004118 <_isatty_r+0x1c>)
 8004100:	2300      	movs	r3, #0
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fc fc2b 	bl	8000962 <_isatty>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_isatty_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_isatty_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20000250 	.word	0x20000250

0800411c <_sbrk_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d06      	ldr	r5, [pc, #24]	; (8004138 <_sbrk_r+0x1c>)
 8004120:	2300      	movs	r3, #0
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	f7fc fc34 	bl	8000994 <_sbrk>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_sbrk_r+0x1a>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_sbrk_r+0x1a>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000250 	.word	0x20000250

0800413c <_init>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr

08004148 <_fini>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr
